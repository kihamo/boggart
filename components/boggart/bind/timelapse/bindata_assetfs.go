// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/views/widget.html
package timelapse

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6b\x6f\xdb\xba\xf9\x7f\x9f\x4f\xf1\x80\xff\x34\xb6\x80\x4a\xb6\xd3\xcb\x7f\x70\xec\x0c\xd8\x82\x83\x0e\x68\xb6\xa2\xcd\xc1\x90\x15\x45\x40\x8b\x94\xc5\x94\x22\x55\x92\x72\xea\x0a\xfe\xee\x03\xa9\x4b\x64\x4b\x96\x5d\x77\x6f\x76\x30\x03\x8d\x65\xf2\xb9\xfe\xf8\xdc\xa8\xe6\x39\x10\x1a\x31\x41\x01\x85\x52\x18\x2a\x0c\x82\xcd\xe6\x6c\x46\xd8\x0a\x42\x8e\xb5\x9e\x23\x25\x9f\xd0\xf5\x19\x00\x40\x73\x35\x94\xdc\x4f\x88\x3f\xb9\x04\xfb\xa4\x93\xea\xe9\xbb\xf6\x27\x97\x25\xfd\x2e\xcf\xf7\x87\x14\x0b\xca\x1b\xbb\x6d\x8a\xca\x8a\x6d\x9a\x5d\xba\x27\xca\x39\x02\x6d\xd6\x9c\xce\x91\x5c\x51\x15\x71\xf9\x34\x05\x9c\x19\xd9\xc1\xe9\xb8\x23\xa9\x92\x8a\xdd\x3e\xfb\xb1\x54\xec\x87\x14\x06\x73\x04\x4a\x5a\x41\x76\x19\x41\x42\x4d\x2c\xc9\x1c\x2d\xa9\x41\x80\x43\xc3\xa4\x98\xa3\x3c\x87\xe0\x23\xfd\x96\x51\x6d\x82\xdf\x3f\xbe\x0f\x3e\x60\x13\xc3\x66\x83\x80\x91\x39\xd2\x14\xab\x30\xf6\x0b\x76\x21\x57\x98\x33\x82\x0d\xed\x36\xc4\x19\xc3\x44\x9a\x19\x30\xeb\x94\xce\x51\xcc\x08\xa1\x02\xc1\x0a\xf3\x8c\xce\x11\x02\x81\x13\x6b\x8c\x92\x09\x82\xd1\xaf\x09\x31\xb2\x5f\x44\xfb\x40\xdf\xee\xc1\xaf\xfa\xe4\x39\xb0\xc9\x9f\x04\xa0\x1b\x6c\x28\x28\x2c\x96\x14\x41\x60\x63\xa6\x8f\x6b\x16\x31\xca\x89\xa6\xa6\x5f\x78\xdb\x26\x61\x94\xe4\xfe\x52\xc9\x2c\x3d\x60\x58\x0f\xbf\x3e\x92\x75\x97\xdd\x01\xec\xa7\x8a\xa6\x54\x10\x28\x7e\xfd\x8c\x29\xb5\x4c\x9d\x62\x51\x09\xc5\x84\xf8\x52\x34\xa5\xf9\x98\x10\x29\xd0\xf5\x8c\xd5\xf1\x89\x21\xc2\x7e\x88\x39\x15\x04\x2b\x74\x3d\x1b\xb1\xeb\xd9\xc8\x4a\xf9\x49\xc5\xcd\x10\x31\xf4\xbb\xd9\x8a\x57\x1b\xa3\x68\x2b\x25\x4a\xbc\xea\x30\xb2\x87\x1d\x01\x16\x04\x02\x4b\xfc\x60\x63\xb2\x7c\x34\x12\x36\x1b\x9b\x15\xf5\x46\xf0\x9b\x54\x09\x36\x80\x2e\xc7\xe3\xb7\xc1\x78\x12\x8c\x2f\x61\xf2\x66\x3a\x7e\x6d\x2b\x0a\xf8\x50\x13\x1b\xd9\x4b\x9a\xe7\x60\xe1\xb6\xc9\xd5\x13\xba\x2d\x57\x47\x84\xad\x8e\x8c\x90\xe3\x48\x8f\x20\x9b\x8d\x0e\xc7\xf5\x01\x31\x1d\x29\x78\x79\x20\xbc\x2e\xc4\x42\xa7\x57\xff\xcb\xb7\xfd\x32\x17\x99\x31\x52\x94\x71\xaf\xb3\x45\xc2\x4c\x1d\xe8\x0b\x23\x60\x61\x84\xaf\xb3\x30\xa4\x5a\xa3\xeb\xba\xa2\x7d\x72\x69\x51\x54\xb3\xd9\xa8\x90\xf1\xc7\x0e\xc0\xd9\xc8\xa6\x7d\x47\xab\xed\x66\x29\xca\x41\x10\x31\x4e\xf5\xbe\x8a\x9f\xe7\xb0\xe0\x32\xfc\x0a\x28\xc5\x4b\x26\xb0\x91\xaa\x40\x14\xea\xbc\xee\x36\xa5\x73\xe2\xe8\xa4\x4c\x2b\x3a\x5b\xd1\xfc\x90\x0a\x43\x55\xf3\x18\x63\xf9\xc4\xc4\x12\x5e\x10\x30\xd2\xfe\x95\x91\xfd\x4b\x85\x51\x8c\x6a\x18\x1a\x69\x30\x07\xcd\x7e\x50\x78\xa1\x3d\x6b\x9c\x60\xbc\xfe\x37\xc4\x84\x40\x20\xa3\x48\x53\xf3\xc0\x69\x64\x60\xe2\xd5\xbf\x15\x5b\xc6\xa6\x04\xe0\xa1\x90\x33\x8c\xb3\x04\x8b\x87\xc5\xda\x50\x0d\x81\x95\x5a\x6c\x78\x2e\x88\xd2\xfd\x6e\xe4\x79\xd1\x3d\xe1\xdc\x8a\x83\xe9\xfc\x00\xb0\xbb\x20\x95\x63\xd7\x5b\x28\xab\xc6\xeb\x03\x49\xd2\xe4\x35\x71\x96\x2c\x04\x66\xbb\xa3\x58\x27\x1f\x4b\x96\xd5\xa4\xf5\xc4\x88\x89\xa7\x30\x19\x8f\x5f\x5c\x01\x61\x3a\xe5\x78\x3d\x2d\xce\xfb\x0a\x81\x56\xe1\x1c\xfd\xb9\x9c\x98\x6a\x15\x17\xd6\xab\x79\x9e\x83\x61\x09\xe5\x38\xd5\xf4\xc1\xae\x3c\x30\x52\x7a\x6e\x0b\x3d\xe6\x66\x8e\x58\x82\xed\x30\x71\x44\xd1\xdf\xc2\x01\xa7\x56\x21\x6c\x05\xc3\x71\x69\x18\xbf\xb2\x51\xe3\xac\x08\xfe\x8e\x13\xea\x8e\x2c\x7e\x75\x24\x77\x7a\x3d\xc3\x10\x2b\x1a\x3d\x3b\x4d\xe4\x93\xe0\x12\x93\xa3\x7c\xde\xa9\x47\xa9\x62\x09\x56\xeb\x6a\x16\x2d\xca\x4f\x23\xac\x6f\x4a\xd9\xf0\x42\x23\x38\xdf\x8e\xd9\x66\x0c\x16\xee\x7c\x62\x3f\x68\x11\x82\xf8\xba\x37\x0c\x6b\x77\x8e\x29\x36\xfd\x9d\xac\x7f\xbb\x3f\xfd\xe1\x8f\x91\xd8\x3d\x18\x9c\x52\x18\xbb\x77\x76\x94\x34\x7e\x96\x8f\xe5\xd7\x33\xf7\x59\xe3\x9a\xd7\xd0\xde\xbe\xe8\x75\x64\xd1\x4c\xe0\x15\x60\xc5\xb0\xcf\xf1\x82\xf2\x39\xfa\x80\x97\x14\x04\x5e\xb1\x25\xb6\x41\xdf\xbc\xeb\x65\xbc\x92\x55\x6a\xd9\xde\x2f\xfa\xc7\xd2\x40\x90\x5a\x19\x93\x96\x63\x9c\x35\x72\xca\xd2\xcc\x27\x65\xcf\x79\x1e\x3f\x37\x9b\x0b\xfb\x3d\xdf\x3f\x7b\xfa\xe3\x89\x3f\xbe\xbc\x73\x03\xe5\x74\xfc\xc6\x1f\xff\xff\x74\x3c\xde\x9a\x2c\x9b\x42\xdd\x20\x7b\x61\xe4\x7c\xdf\x7c\x7a\x58\x1c\xda\xc2\xe7\x37\xa6\xb4\x41\xd7\xc5\xd0\xef\x36\x8a\xcb\xd9\x1c\x19\x95\x51\x74\x7d\xc1\xf1\xb7\x4c\x5e\x95\xf3\x7c\x91\xa0\x9c\x6d\xa1\x54\x1d\x5b\x63\xa9\xec\x15\xc2\x36\x8a\x4c\x18\xc6\x3f\x19\x9a\xc2\x90\x09\x03\x43\x9d\x2d\x4a\x48\x5f\x79\x5e\xb9\xe6\xa2\xdd\xad\xbd\xf6\xbc\x36\xd4\xcf\x93\xfd\x70\x69\xac\xd8\xb1\x07\x43\xee\x14\x9c\x3b\x36\xed\xed\x09\x48\x16\x01\xfd\x56\x12\x59\xf2\x7d\xfd\x9c\xd7\xb7\x19\x5b\x1c\x57\xb4\x44\xc4\x55\x5c\xe1\x72\xa8\xf4\xbf\xe9\x7b\x13\x03\xae\x69\x8f\xf0\xdd\x40\xa9\xc4\x16\x16\x9e\x77\x07\xcc\xf9\x2f\x46\xcc\x79\x3b\x64\xce\x4f\x8d\x99\x06\x10\xbb\x11\xd0\x9f\xfe\xed\xd5\xee\x88\x61\x11\xf0\xad\x40\xb0\xf5\xce\x1d\xed\x11\x79\x67\x93\xa1\xa2\xfd\xef\x4b\xc1\xf7\xb8\x3f\x03\xd5\xb1\x19\x58\x23\x34\xca\x78\x55\x62\x05\x3e\x54\x62\x63\x8a\x09\xaa\xd8\xf3\x1c\xb4\xc1\x86\x85\xef\xee\x6e\xdf\xc3\xb0\x78\xfe\xfd\xe3\x7b\x40\x23\x82\x75\xbc\x90\x58\x91\x11\xd6\x9a\x1a\x3d\x5a\x51\x41\xa4\xd2\xa3\x85\x94\x46\x1b\x85\x53\x77\x47\x77\xa9\x9f\xb2\xf0\x2b\x55\xa3\x50\xeb\xd1\xce\x5a\x90\x30\x11\x84\x5a\x23\x88\x30\xd7\xae\xeb\x9f\x9d\xcd\xdc\xc4\xd6\xb8\xf9\x5b\xce\xb2\x14\x07\xf5\x6c\x06\x79\xed\x61\x4c\x6d\x0b\x2c\x5e\xa1\x15\x77\xcb\xcd\xd9\x6c\xe4\xa4\xec\x73\xf3\x51\xff\x92\x93\x89\x4c\xa8\x30\xa3\xc7\xea\xc9\xf9\xf1\xb8\xe5\xc6\x7f\x1e\xbf\xc7\x6e\xf8\xb6\xd5\x16\x07\xad\x43\xc5\xd2\xea\xe5\x09\x4e\x53\xce\x42\xd7\xd0\x46\x8f\x78\x85\x8b\xcd\x46\x6f\x3b\x1f\x12\x19\x66\xd6\x0f\x2f\x50\x14\x93\xf5\x30\xca\x84\x9b\x0a\x61\xe8\x35\x70\x2e\x68\x07\xff\xd7\x78\x07\x33\xf0\x82\x1d\x9b\x86\x79\xab\x16\xd8\x49\xf2\x83\xdb\xfc\x9b\x08\x15\xb5\x8a\xa6\xf0\x76\xfc\xb2\x45\x98\x30\x71\x83\x0d\x9d\x42\x81\xea\xd0\x0b\x74\xb6\x30\x0a\x87\x66\xf8\xe6\x25\x0c\xd6\x14\xab\x81\xd7\xc1\x86\xbf\xef\xb0\x51\x41\xfe\x11\x0d\x07\x04\xaf\xbb\xe8\x2d\x20\xeb\xbf\xb8\x21\xf5\xaf\xb6\xcc\x53\x3d\x85\x41\xe3\x5e\x3d\x68\xb3\x70\x19\x62\x4e\xa7\xd0\x76\xce\x7e\x22\x97\xef\x53\x18\xdc\xdf\xdf\xdf\x07\xb7\xb7\xc1\xcd\x0d\xbc\x7b\x37\x4d\x92\x41\x8b\x7c\xd3\x96\xed\xc0\xd3\xfb\x64\x0f\xea\x19\xf2\x4e\x12\xbc\xb6\x73\x17\xda\x81\x1c\x01\x5a\xc8\xe5\x12\x2b\xf7\x02\x7c\x30\x85\xcf\xcf\xf8\x19\xac\xcc\x33\x14\x35\x42\x5f\xda\x66\x6c\x2b\xbb\xa7\xda\x50\x75\x82\xc2\xea\xc0\x26\x2f\xc1\x2a\xd5\x83\xfd\x46\x74\x12\x37\x8f\xee\xa0\x95\x77\x31\xd3\xf0\x44\xe9\xd7\x53\x61\x61\x5a\xfe\x93\xd2\xaf\x5b\x56\x95\x16\xd4\x5b\x07\xad\xb0\x25\xfb\x24\x2b\x9a\xee\xd7\xea\xfa\x8d\xdb\xc3\xf3\xd3\x36\x3b\xe4\x12\x29\x4c\x7c\x2a\x74\x8e\xb9\x0b\xb8\x72\xe3\x38\xd8\x4e\x32\xa1\x89\x41\xa9\xad\xcf\xae\x4e\xfa\x9f\x34\xd6\xe1\x65\x0b\xd0\xa9\x70\x95\xc5\xab\x85\x56\xb1\x7e\x1c\x58\xa7\xe8\x6f\xfa\x5e\xe8\xea\xb1\xa9\x8b\x7a\xdb\xce\x43\x05\x6d\xe3\x5d\x9d\xed\x6b\x18\xb6\x4c\x0e\x9c\x92\x84\x99\x46\x8f\xa1\xbb\x4d\xc6\x7e\x56\x58\x01\x49\x61\xde\xdd\x71\xb0\xad\x10\x5b\x18\x0c\x76\x15\x77\x28\x2f\xde\xcb\x7e\x6e\xfc\x27\xd5\x97\x81\x17\xac\x30\x1f\x96\x08\x90\xb4\x00\xc7\xb6\x13\x2f\x28\xca\xfa\xd0\x55\x75\xff\xf6\xd6\xbf\xb9\xf9\x7c\xf7\xc5\xd5\xf5\xa9\xd6\xff\x1a\x78\x5e\xfb\x45\x76\x9f\x42\x23\x3b\xd4\x51\x41\x4e\x52\xb6\x69\xfc\xae\x9e\x67\xa3\xa2\xb5\x37\x86\x9e\x7f\x07\x00\x00\xff\xff\x67\xe4\x7b\xfb\x24\x1d\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}

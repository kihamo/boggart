// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/layouts/widget.html
// templates/views/default.html
package neptun

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesLayoutsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x4f\x8f\x9b\x30\x10\xc5\xef\xf9\x14\x4f\x3e\xb5\x07\xa0\xc9\xa9\x6a\x09\xa7\x1e\x7b\xa8\x22\xf5\x1c\x0d\x78\x68\xdc\x75\x0c\xc1\x8e\x37\x92\xc5\x77\x5f\x59\x01\x96\xcd\x42\x72\xc9\xf0\xe6\xf9\x37\xff\x42\x80\xe3\x73\xab\xc9\x31\x44\x49\x96\x05\x52\xf4\xfd\x66\x13\x02\x24\xd7\xca\x30\x44\xd5\x18\xc7\xc6\x89\xa8\xe7\x52\x79\x54\x9a\xac\xdd\x8b\xae\x79\x15\xc5\x06\x00\xe6\x6a\xd5\xe8\xe4\x2c\x93\xed\x0e\x31\xb2\xe7\x31\xba\xd9\x64\xbb\x1b\xfc\x8f\x6f\x6e\xc7\x96\x0c\xeb\x59\xf6\xb3\x63\xec\xe2\xa3\x67\xf2\x75\x8d\xe6\xbd\x70\x54\x2e\x91\x26\xe7\x55\x8f\x40\x43\x1e\x86\x7c\xe2\xa8\xb4\x28\xa9\x3b\xc6\x40\xbc\x63\xb4\xb2\x4b\xb5\x26\x92\x56\x83\xb7\xed\xd8\xb2\x71\xe4\x54\x63\x44\x08\x50\x35\xf8\x82\x94\xaa\x28\x40\x48\xf6\xaa\xe2\xb8\xbb\xb1\x72\xcc\x78\x8e\x56\x36\x12\x7d\x5f\xe4\x84\x53\xc7\xf5\xfe\xe9\xeb\xff\xe4\xc9\x56\x9d\x6a\xdd\x0f\xdf\x28\xf9\xe5\xdb\xd7\x9f\x91\xa0\x2d\xa3\xef\x43\x40\x7a\xe0\xcb\x95\xad\x4b\xff\x1e\x7e\xa7\x7f\xc8\x9d\xee\xf2\xbd\x84\x28\x22\x7a\xfb\xdd\x40\xfc\x1a\x88\xf1\xca\x79\x46\x45\x9e\x69\xb5\xb2\xac\xec\xaa\x57\x32\xb3\xc3\x38\x2a\x93\xf5\xd3\x3c\x3b\xd1\x9c\x10\x15\xd4\x24\x19\xf7\xed\x40\x99\x27\xb4\xf8\x0b\x01\xa5\x6e\xaa\x17\x88\x96\xfe\x0d\xf3\x60\x1a\x78\xbd\x91\x4c\x2a\xbf\x36\xef\x62\x6a\x41\x7e\x90\x66\x9f\x43\x38\xfc\x4d\xed\xbc\x05\x00\x00\xff\xff\x06\xd4\xea\x79\x66\x03\x00\x00"

func templatesLayoutsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutsWidgetHtml,
		"templates/layouts/widget.html",
	)
}

func templatesLayoutsWidgetHtml() (*asset, error) {
	bytes, err := templatesLayoutsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layouts/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsDefaultHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\x4f\x6b\xdb\x40\x10\xc5\xef\xfe\x14\xc3\x42\x8f\x8e\xe3\x5b\x29\xb2\x7b\xeb\xa5\x87\x1e\x1a\xda\xa3\x18\x6b\xc7\xf2\x92\xf5\x8e\xd8\x99\x44\x18\xa1\xef\x5e\xd6\x92\xff\xd4\x0e\x41\x0e\x04\xf9\xa6\x65\xe7\x37\xf3\x1e\xbc\x11\xdb\x34\x60\x69\xed\x02\x81\xa9\xb0\x24\x03\x6d\x3b\xc9\xd6\x1c\xb7\x10\xd9\xd3\xc2\xa4\x4f\x03\x58\xa8\xe3\xb0\x30\xdf\x0d\x6c\x49\x37\x6c\x17\xa6\x62\x51\x03\xce\x2e\x8c\x90\xaa\x0b\xa5\x18\xb0\xa8\x38\x55\x2e\xcb\x44\xbe\xa2\x77\x16\x95\xa3\x59\x4e\x00\x00\x32\xc5\x95\x27\x28\x3c\x8a\x2c\x4c\x77\xb0\x3a\x8d\x24\x15\x07\x71\xaf\x04\x81\xeb\x88\x95\x01\xd1\x5d\x6a\x50\x3b\xab\x9b\x6f\xf3\xc7\xc7\x2f\x7d\x87\xae\xcb\x86\xd0\x9e\x9f\xe3\xe9\xd0\x17\x1c\x66\x6c\xed\xb4\x60\x3f\x9d\x9b\x65\xd3\x80\x9b\x7f\x0d\x60\x7e\x55\xc9\x88\x81\x07\x68\xdb\x6c\xa6\x9b\x2b\xf6\x54\xfa\x07\xfd\x0b\xbd\x55\x99\xcd\xce\x67\xa6\xbb\x0b\x45\x2b\xb6\xbb\x77\x15\xda\xd3\x94\x1f\x9e\x39\x42\x8d\xb2\x71\xa1\x3c\x4e\xb3\x6f\x13\x6b\x78\x58\xa7\xfa\xbc\xaf\x87\xb6\x3d\x36\xda\x91\x74\x78\xd3\x00\x79\xa1\xf3\xbb\xc0\xa7\xab\x60\xaf\x46\x5c\x18\x7a\x5f\xaf\x8b\xa2\x50\x46\x7e\xa9\x00\x3d\x45\x1d\xa2\x39\x31\xf9\x9e\xc9\xf7\xcc\x08\xba\x7f\x53\xc1\xc1\xde\x28\x5c\xf6\xd0\xc8\xca\xff\xba\x48\x9e\x44\x40\x28\x08\x47\xf0\x5c\xc3\x0a\x55\x29\xee\x06\x58\xa8\x7b\x3a\xef\xe8\xdc\x73\x9d\xf7\xf4\x5d\x78\x11\xf9\x90\x09\x91\x91\xb3\xaf\x58\x41\xe1\x59\x06\x6e\xed\xd9\x06\x28\x56\x79\x4f\x8e\xbd\x07\xb7\x99\xf8\x6f\x1b\xc6\x75\x71\x99\xa3\x0a\x5d\x4c\x4a\xb6\x6c\xe9\x03\x79\xea\xf1\x3c\xe1\x77\x90\x2b\x51\xd4\x21\x36\x2e\x53\xb5\xe7\xee\x21\x53\x43\x0d\x5c\x25\x6a\x2c\x07\x4f\x35\x77\xf2\x65\x68\x84\xb4\xe6\x4e\xb7\x8c\x95\x9a\x27\xac\xe4\xb0\xbd\xc0\xe1\xc6\x5f\xaa\x62\x25\x87\x05\xce\x39\x8c\xfc\x67\xfd\x49\xbb\x15\x63\xb4\xe0\xb9\x78\x1e\xa0\xfe\xb9\xaf\xcf\x53\xfd\xe7\xe8\x9d\x9d\x3d\xe3\xb2\xd9\xfe\xb9\xba\x9c\x64\xb3\xf4\x1e\x5e\x4e\x8e\x2d\xfe\x05\x00\x00\xff\xff\x1e\xe4\x02\xd0\x3f\x0b\x00\x00"

func templatesViewsDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDefaultHtml,
		"templates/views/default.html",
	)
}

func templatesViewsDefaultHtml() (*asset, error) {
	bytes, err := templatesViewsDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/default.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/layouts/widget.html": templatesLayoutsWidgetHtml,
	"templates/views/default.html":  templatesViewsDefaultHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"layouts": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesLayoutsWidgetHtml, map[string]*bintree{}},
		}},
		"views": &bintree{nil, map[string]*bintree{
			"default.html": &bintree{templatesViewsDefaultHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}

// Code generated by go-swagger; DO NOT EDIT.

package eq

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new eq API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for eq API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	EQGetList(params *EQGetListParams, opts ...ClientOption) (*EQGetListOK, error)

	EQLoad(params *EQLoadParams, opts ...ClientOption) (*EQLoadOK, error)

	EQOff(params *EQOffParams, opts ...ClientOption) (*EQOffOK, error)

	EQOn(params *EQOnParams, opts ...ClientOption) (*EQOnOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
EQGetList Check all the possible EQ settings
*/
func (a *Client) EQGetList(params *EQGetListParams, opts ...ClientOption) (*EQGetListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEQGetListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EQGetList",
		Method:             "GET",
		PathPattern:        "/httpapi.asp?command=EQGetList",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"text/html"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EQGetListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EQGetListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EQGetList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EQLoad Set the specific EQ with name
*/
func (a *Client) EQLoad(params *EQLoadParams, opts ...ClientOption) (*EQLoadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEQLoadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EQLoad",
		Method:             "GET",
		PathPattern:        "/httpapi.asp?command=EQLoad:{name}",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"text/html"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EQLoadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EQLoadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EQLoad: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EQOff Turn off the EQ setting
*/
func (a *Client) EQOff(params *EQOffParams, opts ...ClientOption) (*EQOffOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEQOffParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EQOff",
		Method:             "GET",
		PathPattern:        "/httpapi.asp?command=EQOff",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"text/html"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EQOffReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EQOffOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EQOff: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EQOn Turn on the EQ
*/
func (a *Client) EQOn(params *EQOnParams, opts ...ClientOption) (*EQOnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEQOnParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EQOn",
		Method:             "GET",
		PathPattern:        "/httpapi.asp?command=EQOn",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"text/html"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EQOnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EQOnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EQOn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

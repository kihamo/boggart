// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	extend "github.com/kihamo/boggart/protocols/swagger"
)

// MetaInfo meta info
//
// swagger:model MetaInfo
type MetaInfo struct {

	// meta data
	MetaData *MetaInfoMetaData `json:"metaData,omitempty"`
}

// Validate validates this meta info
func (m *MetaInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetaData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetaInfo) validateMetaData(formats strfmt.Registry) error {
	if swag.IsZero(m.MetaData) { // not required
		return nil
	}

	if m.MetaData != nil {
		if err := m.MetaData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metaData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metaData")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this meta info based on the context it is used
func (m *MetaInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetaData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetaInfo) contextValidateMetaData(ctx context.Context, formats strfmt.Registry) error {

	if m.MetaData != nil {

		if swag.IsZero(m.MetaData) { // not required
			return nil
		}

		if err := m.MetaData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metaData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metaData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetaInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetaInfo) UnmarshalBinary(b []byte) error {
	var res MetaInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MetaInfoMetaData meta info meta data
//
// swagger:model MetaInfoMetaData
type MetaInfoMetaData struct {

	// album
	Album string `json:"album,omitempty"`

	// album art URI
	AlbumArtURI string `json:"albumArtURI,omitempty"`

	// artist
	Artist string `json:"artist,omitempty"`

	// bit depth
	BitDepth string `json:"bitDepth,omitempty"`

	// bit rate
	BitRate extend.IntegerAsString `json:"bitRate,omitempty"`

	// sample rate
	SampleRate string `json:"sampleRate,omitempty"`

	// subtitle
	Subtitle string `json:"subtitle,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// track Id
	TrackID extend.IntegerAsString `json:"trackId,omitempty"`
}

// Validate validates this meta info meta data
func (m *MetaInfoMetaData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBitRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrackID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetaInfoMetaData) validateBitRate(formats strfmt.Registry) error {
	if swag.IsZero(m.BitRate) { // not required
		return nil
	}

	if err := m.BitRate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("metaData" + "." + "bitRate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("metaData" + "." + "bitRate")
		}
		return err
	}

	return nil
}

func (m *MetaInfoMetaData) validateTrackID(formats strfmt.Registry) error {
	if swag.IsZero(m.TrackID) { // not required
		return nil
	}

	if err := m.TrackID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("metaData" + "." + "trackId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("metaData" + "." + "trackId")
		}
		return err
	}

	return nil
}

// ContextValidate validate this meta info meta data based on the context it is used
func (m *MetaInfoMetaData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBitRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrackID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetaInfoMetaData) contextValidateBitRate(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.BitRate) { // not required
		return nil
	}

	if err := m.BitRate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("metaData" + "." + "bitRate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("metaData" + "." + "bitRate")
		}
		return err
	}

	return nil
}

func (m *MetaInfoMetaData) contextValidateTrackID(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.TrackID) { // not required
		return nil
	}

	if err := m.TrackID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("metaData" + "." + "trackId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("metaData" + "." + "trackId")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetaInfoMetaData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetaInfoMetaData) UnmarshalBinary(b []byte) error {
	var res MetaInfoMetaData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

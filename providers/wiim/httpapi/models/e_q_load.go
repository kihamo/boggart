// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EQLoad e q load
//
// swagger:model EQLoad
type EQLoad struct {

	// e q band
	EQBand []*EQLoadEQBandItems0 `json:"EQBand"`

	// e q stat
	// Enum: [On Off]
	EQStat string `json:"EQStat,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// plugin URI
	PluginURI string `json:"pluginURI,omitempty"`

	// source name
	// Enum: [line-in bluetooth optical udisk wifi]
	SourceName string `json:"source_name,omitempty"`

	// status
	// Enum: [OK Failed]
	Status string `json:"status,omitempty"`
}

// Validate validates this e q load
func (m *EQLoad) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEQBand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEQStat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EQLoad) validateEQBand(formats strfmt.Registry) error {
	if swag.IsZero(m.EQBand) { // not required
		return nil
	}

	for i := 0; i < len(m.EQBand); i++ {
		if swag.IsZero(m.EQBand[i]) { // not required
			continue
		}

		if m.EQBand[i] != nil {
			if err := m.EQBand[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("EQBand" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("EQBand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var eQLoadTypeEQStatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["On","Off"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eQLoadTypeEQStatPropEnum = append(eQLoadTypeEQStatPropEnum, v)
	}
}

const (

	// EQLoadEQStatOn captures enum value "On"
	EQLoadEQStatOn string = "On"

	// EQLoadEQStatOff captures enum value "Off"
	EQLoadEQStatOff string = "Off"
)

// prop value enum
func (m *EQLoad) validateEQStatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eQLoadTypeEQStatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EQLoad) validateEQStat(formats strfmt.Registry) error {
	if swag.IsZero(m.EQStat) { // not required
		return nil
	}

	// value enum
	if err := m.validateEQStatEnum("EQStat", "body", m.EQStat); err != nil {
		return err
	}

	return nil
}

var eQLoadTypeSourceNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["line-in","bluetooth","optical","udisk","wifi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eQLoadTypeSourceNamePropEnum = append(eQLoadTypeSourceNamePropEnum, v)
	}
}

const (

	// EQLoadSourceNameLineDashIn captures enum value "line-in"
	EQLoadSourceNameLineDashIn string = "line-in"

	// EQLoadSourceNameBluetooth captures enum value "bluetooth"
	EQLoadSourceNameBluetooth string = "bluetooth"

	// EQLoadSourceNameOptical captures enum value "optical"
	EQLoadSourceNameOptical string = "optical"

	// EQLoadSourceNameUdisk captures enum value "udisk"
	EQLoadSourceNameUdisk string = "udisk"

	// EQLoadSourceNameWifi captures enum value "wifi"
	EQLoadSourceNameWifi string = "wifi"
)

// prop value enum
func (m *EQLoad) validateSourceNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eQLoadTypeSourceNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EQLoad) validateSourceName(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceName) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceNameEnum("source_name", "body", m.SourceName); err != nil {
		return err
	}

	return nil
}

var eQLoadTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OK","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eQLoadTypeStatusPropEnum = append(eQLoadTypeStatusPropEnum, v)
	}
}

const (

	// EQLoadStatusOK captures enum value "OK"
	EQLoadStatusOK string = "OK"

	// EQLoadStatusFailed captures enum value "Failed"
	EQLoadStatusFailed string = "Failed"
)

// prop value enum
func (m *EQLoad) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eQLoadTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EQLoad) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this e q load based on the context it is used
func (m *EQLoad) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEQBand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EQLoad) contextValidateEQBand(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EQBand); i++ {

		if m.EQBand[i] != nil {

			if swag.IsZero(m.EQBand[i]) { // not required
				return nil
			}

			if err := m.EQBand[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("EQBand" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("EQBand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EQLoad) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EQLoad) UnmarshalBinary(b []byte) error {
	var res EQLoad
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EQLoadEQBandItems0 e q load e q band items0
//
// swagger:model EQLoadEQBandItems0
type EQLoadEQBandItems0 struct {

	// index
	Index int64 `json:"index,omitempty"`

	// param name
	ParamName string `json:"param_name,omitempty"`

	// value
	Value float64 `json:"value,omitempty"`
}

// Validate validates this e q load e q band items0
func (m *EQLoadEQBandItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this e q load e q band items0 based on context it is used
func (m *EQLoadEQBandItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EQLoadEQBandItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EQLoadEQBandItems0) UnmarshalBinary(b []byte) error {
	var res EQLoadEQBandItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	extend "github.com/kihamo/boggart/protocols/swagger"
)

// StatusEx status ex
//
// swagger:model StatusEx
type StatusEx struct {

	// The MAC address of the AP that the device is connected to
	APMAC extend.MAC `json:"AP_MAC,omitempty"`

	// The Basic Service Set Identifiers : In most cases this will be the MAC Address of the Wireless Acces Point Used (e.g. Router)
	BSSID string `json:"BSSID,omitempty"`

	// The BT MAC address of the device
	BTMAC extend.MAC `json:"BTMAC,omitempty"`

	// ble remote connected
	BleRemoteConnected extend.BooleanAsString `json:"BleRemoteConnected,omitempty"`

	// ble remote control
	BleRemoteControl extend.BooleanAsString `json:"BleRemoteControl,omitempty"`

	// ble remote update checked counter
	BleRemoteUpdateCheckedCounter extend.IntegerAsString `json:"BleRemote_update_checked_counter,omitempty"`

	// The device UPnP and Airplay friendly name
	DeviceName string `json:"DeviceName,omitempty"`

	// e q version
	EQVersion string `json:"EQVersion,omitempty"`

	// e q support
	EQSupport string `json:"EQ_support,omitempty"`

	// e t h m a c
	ETHMAC extend.MAC `json:"ETH_MAC,omitempty"`

	// Reserved
	FWReleaseVersion string `json:"FW_Release_version,omitempty"`

	// group name
	GroupName string `json:"GroupName,omitempty"`

	// hi fi s r c version
	HiFiSRCVersion string `json:"HiFiSRC_version,omitempty"`

	// initial configuration
	InitialConfiguration extend.BooleanAsString `json:"InitialConfiguration,omitempty"`

	// MAC address of the device when working in hotspot mode, will show on APP and also the sticker on module/device.
	MAC extend.MAC `json:"MAC,omitempty"`

	// module color number
	ModuleColorNumber extend.IntegerAsString `json:"ModuleColorNumber,omitempty"`

	// module color string
	ModuleColorString string `json:"ModuleColorString,omitempty"`

	// If there is a new firmware available (in case of VersionUpdate is set to 1), this is the new version number
	NewVer string `json:"NewVer,omitempty"`

	// p c b version
	PCBVersion string `json:"PCB_version,omitempty"`

	// RSSI Level of used WiFi Value ranges from 0 - 100. 100 means best signal strength.
	//
	RSSI extend.IntegerAsString `json:"RSSI,omitempty"`

	// Firmware build date in format: YYYYMMDD
	Release string `json:"Release,omitempty"`

	// 0: No new version 1: new version.
	//
	VersionUpdate extend.BooleanAsString `json:"VersionUpdate,omitempty"`

	// The current connected WiFi channel
	WifiChannel extend.IntegerAsString `json:"WifiChannel,omitempty"`

	// alexa beta enable
	AlexaBetaEnable extend.BooleanAsString `json:"alexa_beta_enable,omitempty"`

	// alexa force beta cfg
	AlexaForceBetaCfg extend.BooleanAsString `json:"alexa_force_beta_cfg,omitempty"`

	// alexa ver
	AlexaVer string `json:"alexa_ver,omitempty"`

	//  The IP v4 address of the device
	Apcli0 string `json:"apcli0,omitempty"`

	// app timezone id
	AppTimezoneID string `json:"app_timezone_id,omitempty"`

	// audio output mode ver
	AudioOutputModeVer string `json:"audioOutputModeVer,omitempty"`

	// audio channel config
	AudioChannelConfig string `json:"audio_channel_config,omitempty"`

	// auto sense version
	AutoSenseVersion string `json:"autoSenseVersion,omitempty"`

	// avs timezone id
	AvsTimezoneID string `json:"avs_timezone_id,omitempty"`

	// 0: battery is not charging 1: battery is charging
	//
	Battery extend.BooleanAsString `json:"battery,omitempty"`

	// Battery charge level Value ranges from 0 - 100
	//
	BatteryPercent extend.IntegerAsString `json:"battery_percent,omitempty"`

	// build
	// Enum: [release debug backup]
	Build string `json:"build,omitempty"`

	// Bit mask for the module feature, used internally
	Cap1 extend.IntegerAsString `json:"cap1,omitempty"`

	// Bit mask for the module feature, used internally
	Capability extend.IntegerAsString `json:"capability,omitempty"`

	// cast enable
	CastEnable extend.BooleanAsString `json:"cast_enable,omitempty"`

	// cast usage report
	CastUsageReport extend.BooleanAsString `json:"cast_usage_report,omitempty"`

	// TCP port for internal messages
	CommunicationPort extend.IntegerAsString `json:"communication_port,omitempty"`

	// Current Date
	Date string `json:"date,omitempty"`

	// Version for voice processing, not used
	DspVer string `json:"dsp_ver,omitempty"`

	// New version for voice processing, not used
	DspVerNew string `json:"dsp_ver_new,omitempty"`

	// The AP name in the HEX format
	Essid extend.HEXString `json:"essid,omitempty"`

	// eth0
	Eth0 string `json:"eth0,omitempty"`

	// eth2
	Eth2 string `json:"eth2,omitempty"`

	// Reserved
	Expired extend.BooleanAsString `json:"expired,omitempty"`

	// hexadecimal value
	External string `json:"external,omitempty"`

	// Current firmware version
	Firmware string `json:"firmware,omitempty"`

	// 0 means it's a master speaker, 1 means a slave speaker in a group
	Group extend.IntegerAsString `json:"group,omitempty"`

	// Hardware model
	Hardware string `json:"hardware,omitempty"`

	// hdmi ver
	HdmiVer string `json:"hdmi_ver,omitempty"`

	// hdmi ver new
	HdmiVerNew string `json:"hdmi_ver_new,omitempty"`

	// SSID of the WiFi the device is connected to [hexed string]
	HideSSID extend.BooleanAsString `json:"hideSSID,omitempty"`

	// Current status of internet access: 0: not ready 1: ready
	//
	Internet extend.BooleanAsString `json:"internet,omitempty"`

	// language
	Language string `json:"language,omitempty"`

	// languages
	Languages string `json:"languages,omitempty"`

	// lbc support
	LbcSupport extend.BooleanAsString `json:"lbc_support,omitempty"`

	// max volume
	MaxVolume extend.IntegerAsString `json:"max_volume,omitempty"`

	// Version of MCU on base board
	McuVer string `json:"mcu_ver,omitempty"`

	// New version of MCU on base board, indicates if there is a newer version of MCU available.  0 - No new version others - New version"
	//
	McuVerNew string `json:"mcu_ver_new,omitempty"`

	// mqtt support
	MqttSupport extend.BooleanAsString `json:"mqtt_support,omitempty"`

	// WiFi connect state: 0: no connection 1: connecting 2: connected
	//
	Netstat extend.IntegerAsString `json:"netstat,omitempty"`

	// new iheart podcast
	NewIheartPodcast extend.BooleanAsString `json:"new_iheart_podcast,omitempty"`

	// new tunein preset and alarm
	NewTuneinPresetAndAlarm extend.BooleanAsString `json:"new_tunein_preset_and_alarm,omitempty"`

	// ota api ver
	OtaAPIVer string `json:"ota_api_ver,omitempty"`

	// ota interface ver
	OtaInterfaceVer string `json:"ota_interface_ver,omitempty"`

	// This is a bit mask, each bit stands for an external input source: bit1: LineIn (Aux support) bit2: Bluetooth support bit3: USB support bit4: Optical support bit6: Coaxial support bit8: LineIn 2 support bit15: USBDAC support Others are reserved or not used.
	//
	PlmSupport extend.IntegerAsString `json:"plm_support,omitempty"`

	// power mode
	PowerMode extend.IntegerAsString `json:"power_mode,omitempty"`

	// Number of preset keys
	PresetKey extend.IntegerAsString `json:"preset_key,omitempty"`

	// Project name which would stand for a specific board
	PrivPrj string `json:"priv_prj,omitempty"`

	// privacy mode
	PrivacyMode extend.BooleanAsString `json:"privacy_mode,omitempty"`

	// The project name
	Project string `json:"project,omitempty"`

	// Code identifier for customized release
	ProjectBuildName string `json:"project_build_name,omitempty"`

	// Indicates if the prompting voice would be played or not, you can set with command PromptEnable and PromptDisable.  0 - No prompting voice 1 - Have prompting voice
	//
	PromptStatus extend.BooleanAsString `json:"prompt_status,omitempty"`

	// public https version
	PublicHTTPSVersion string `json:"public_https_version,omitempty"`

	// ra0
	Ra0 string `json:"ra0,omitempty"`

	// region
	Region string `json:"region,omitempty"`

	// securemode
	Securemode extend.IntegerAsString `json:"securemode,omitempty"`

	// security
	Security string `json:"security,omitempty"`

	// security capabilities
	SecurityCapabilities *StatusExSecurityCapabilities `json:"security_capabilities,omitempty"`

	// security version
	SecurityVersion string `json:"security_version,omitempty"`

	// service version
	ServiceVersion string `json:"service_version,omitempty"`

	// set play mode enable
	SetPlayModeEnable extend.BooleanAsString `json:"set_play_mode_enable,omitempty"`

	// set play mode gain
	SetPlayModeGain extend.BooleanAsString `json:"set_play_mode_gain,omitempty"`

	// silence ota flag
	SilenceOtaFlag extend.BooleanAsString `json:"silence_ota_flag,omitempty"`

	// Name of the device
	Ssid string `json:"ssid,omitempty"`

	// 0: If Airplay is enabled 1: If DLNA is enabled 2: Has TTPod support 3: Has TuneIn support 4: Has Pandora support 5: Has DoubanFM support
	//
	Streams extend.IntegerAsString `json:"streams,omitempty"`

	// streams all
	StreamsAll string `json:"streams_all,omitempty"`

	// Temporary UUID (will change after device reboot)
	TempUUID string `json:"temp_uuid,omitempty"`

	// temperature cpu
	TemperatureCPU extend.IntegerAsString `json:"temperature_cpu,omitempty"`

	// temperature power control
	TemperaturePowerControl extend.IntegerAsString `json:"temperature_power_control,omitempty"`

	// temperature tmp102
	TemperatureTmp102 extend.IntegerAsString `json:"temperature_tmp102,omitempty"`

	// tidal version
	TidalVersion string `json:"tidal_version,omitempty"`

	// Current local time
	Time string `json:"time,omitempty"`

	// Offset of timezone
	Tz string `json:"tz,omitempty"`

	// tz info ver
	TzInfoVer string `json:"tz_info_ver,omitempty"`

	// Port used for TCP/IP Communcations/Socket Connections
	UartPassPort extend.IntegerAsString `json:"uart_pass_port,omitempty"`

	// uboot verinfo
	UbootVerinfo string `json:"uboot_verinfo,omitempty"`

	// udisk
	Udisk extend.IntegerAsString `json:"udisk,omitempty"`

	// umount
	Umount extend.IntegerAsString `json:"umount,omitempty"`

	// update check count
	UpdateCheckCount extend.IntegerAsString `json:"update_check_count,omitempty"`

	// The UPnP UUID
	UpnpUUID string `json:"upnp_uuid,omitempty"`

	// UPnP Device Architecture Version
	UpnpVersion string `json:"upnp_version,omitempty"`

	// The unique ID of the device
	UUID string `json:"uuid,omitempty"`

	// volume control
	VolumeControl extend.IntegerAsString `json:"volume_control,omitempty"`

	// web firmware update hide
	WebFirmwareUpdateHide extend.BooleanAsString `json:"web_firmware_update_hide,omitempty"`

	// wlan data rate
	WlanDataRate extend.IntegerAsString `json:"wlanDataRate,omitempty"`

	// wlan freq
	WlanFreq extend.IntegerAsString `json:"wlanFreq,omitempty"`

	// wlan noise
	WlanNoise extend.IntegerAsString `json:"wlanNoise,omitempty"`

	// wlan snr
	WlanSnr extend.IntegerAsString `json:"wlanSnr,omitempty"`

	// LinkPlay's MRM SDK version, version 4.2 or above won't work with any version below 4.2
	WmrmVersion string `json:"wmrm_version,omitempty"`
}

// Validate validates this status ex
func (m *StatusEx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPMAC(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBTMAC(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBleRemoteConnected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBleRemoteControl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBleRemoteUpdateCheckedCounter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateETHMAC(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitialConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMAC(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModuleColorNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRSSI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWifiChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlexaBetaEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlexaForceBetaCfg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBattery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBatteryPercent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuild(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCap1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCastEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCastUsageReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunicationPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEssid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHideSSID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLbcSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMqttSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetstat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewIheartPodcast(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewTuneinPresetAndAlarm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlmSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePresetKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivacyMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromptStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecuremode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetPlayModeEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetPlayModeGain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSilenceOtaFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemperatureCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemperaturePowerControl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemperatureTmp102(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUartPassPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateCheckCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeControl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebFirmwareUpdateHide(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWlanDataRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWlanFreq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWlanNoise(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWlanSnr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatusEx) validateAPMAC(formats strfmt.Registry) error {
	if swag.IsZero(m.APMAC) { // not required
		return nil
	}

	if err := m.APMAC.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AP_MAC")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AP_MAC")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateBTMAC(formats strfmt.Registry) error {
	if swag.IsZero(m.BTMAC) { // not required
		return nil
	}

	if err := m.BTMAC.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BTMAC")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BTMAC")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateBleRemoteConnected(formats strfmt.Registry) error {
	if swag.IsZero(m.BleRemoteConnected) { // not required
		return nil
	}

	if err := m.BleRemoteConnected.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BleRemoteConnected")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BleRemoteConnected")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateBleRemoteControl(formats strfmt.Registry) error {
	if swag.IsZero(m.BleRemoteControl) { // not required
		return nil
	}

	if err := m.BleRemoteControl.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BleRemoteControl")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BleRemoteControl")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateBleRemoteUpdateCheckedCounter(formats strfmt.Registry) error {
	if swag.IsZero(m.BleRemoteUpdateCheckedCounter) { // not required
		return nil
	}

	if err := m.BleRemoteUpdateCheckedCounter.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BleRemote_update_checked_counter")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BleRemote_update_checked_counter")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateETHMAC(formats strfmt.Registry) error {
	if swag.IsZero(m.ETHMAC) { // not required
		return nil
	}

	if err := m.ETHMAC.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ETH_MAC")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ETH_MAC")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateInitialConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.InitialConfiguration) { // not required
		return nil
	}

	if err := m.InitialConfiguration.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("InitialConfiguration")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("InitialConfiguration")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateMAC(formats strfmt.Registry) error {
	if swag.IsZero(m.MAC) { // not required
		return nil
	}

	if err := m.MAC.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("MAC")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("MAC")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateModuleColorNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.ModuleColorNumber) { // not required
		return nil
	}

	if err := m.ModuleColorNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ModuleColorNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ModuleColorNumber")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateRSSI(formats strfmt.Registry) error {
	if swag.IsZero(m.RSSI) { // not required
		return nil
	}

	if err := m.RSSI.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RSSI")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RSSI")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateVersionUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionUpdate) { // not required
		return nil
	}

	if err := m.VersionUpdate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionUpdate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionUpdate")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateWifiChannel(formats strfmt.Registry) error {
	if swag.IsZero(m.WifiChannel) { // not required
		return nil
	}

	if err := m.WifiChannel.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("WifiChannel")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("WifiChannel")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateAlexaBetaEnable(formats strfmt.Registry) error {
	if swag.IsZero(m.AlexaBetaEnable) { // not required
		return nil
	}

	if err := m.AlexaBetaEnable.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("alexa_beta_enable")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("alexa_beta_enable")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateAlexaForceBetaCfg(formats strfmt.Registry) error {
	if swag.IsZero(m.AlexaForceBetaCfg) { // not required
		return nil
	}

	if err := m.AlexaForceBetaCfg.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("alexa_force_beta_cfg")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("alexa_force_beta_cfg")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateBattery(formats strfmt.Registry) error {
	if swag.IsZero(m.Battery) { // not required
		return nil
	}

	if err := m.Battery.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("battery")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("battery")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateBatteryPercent(formats strfmt.Registry) error {
	if swag.IsZero(m.BatteryPercent) { // not required
		return nil
	}

	if err := m.BatteryPercent.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("battery_percent")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("battery_percent")
		}
		return err
	}

	return nil
}

var statusExTypeBuildPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["release","debug","backup"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		statusExTypeBuildPropEnum = append(statusExTypeBuildPropEnum, v)
	}
}

const (

	// StatusExBuildRelease captures enum value "release"
	StatusExBuildRelease string = "release"

	// StatusExBuildDebug captures enum value "debug"
	StatusExBuildDebug string = "debug"

	// StatusExBuildBackup captures enum value "backup"
	StatusExBuildBackup string = "backup"
)

// prop value enum
func (m *StatusEx) validateBuildEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, statusExTypeBuildPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StatusEx) validateBuild(formats strfmt.Registry) error {
	if swag.IsZero(m.Build) { // not required
		return nil
	}

	// value enum
	if err := m.validateBuildEnum("build", "body", m.Build); err != nil {
		return err
	}

	return nil
}

func (m *StatusEx) validateCap1(formats strfmt.Registry) error {
	if swag.IsZero(m.Cap1) { // not required
		return nil
	}

	if err := m.Cap1.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cap1")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cap1")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateCapability(formats strfmt.Registry) error {
	if swag.IsZero(m.Capability) { // not required
		return nil
	}

	if err := m.Capability.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("capability")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("capability")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateCastEnable(formats strfmt.Registry) error {
	if swag.IsZero(m.CastEnable) { // not required
		return nil
	}

	if err := m.CastEnable.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cast_enable")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cast_enable")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateCastUsageReport(formats strfmt.Registry) error {
	if swag.IsZero(m.CastUsageReport) { // not required
		return nil
	}

	if err := m.CastUsageReport.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cast_usage_report")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cast_usage_report")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateCommunicationPort(formats strfmt.Registry) error {
	if swag.IsZero(m.CommunicationPort) { // not required
		return nil
	}

	if err := m.CommunicationPort.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("communication_port")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("communication_port")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateEssid(formats strfmt.Registry) error {
	if swag.IsZero(m.Essid) { // not required
		return nil
	}

	if err := m.Essid.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("essid")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("essid")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateExpired(formats strfmt.Registry) error {
	if swag.IsZero(m.Expired) { // not required
		return nil
	}

	if err := m.Expired.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("expired")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("expired")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.Group) { // not required
		return nil
	}

	if err := m.Group.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("group")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("group")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateHideSSID(formats strfmt.Registry) error {
	if swag.IsZero(m.HideSSID) { // not required
		return nil
	}

	if err := m.HideSSID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("hideSSID")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("hideSSID")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateInternet(formats strfmt.Registry) error {
	if swag.IsZero(m.Internet) { // not required
		return nil
	}

	if err := m.Internet.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("internet")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("internet")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateLbcSupport(formats strfmt.Registry) error {
	if swag.IsZero(m.LbcSupport) { // not required
		return nil
	}

	if err := m.LbcSupport.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lbc_support")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lbc_support")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateMaxVolume(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxVolume) { // not required
		return nil
	}

	if err := m.MaxVolume.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("max_volume")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("max_volume")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateMqttSupport(formats strfmt.Registry) error {
	if swag.IsZero(m.MqttSupport) { // not required
		return nil
	}

	if err := m.MqttSupport.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mqtt_support")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mqtt_support")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateNetstat(formats strfmt.Registry) error {
	if swag.IsZero(m.Netstat) { // not required
		return nil
	}

	if err := m.Netstat.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("netstat")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("netstat")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateNewIheartPodcast(formats strfmt.Registry) error {
	if swag.IsZero(m.NewIheartPodcast) { // not required
		return nil
	}

	if err := m.NewIheartPodcast.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("new_iheart_podcast")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("new_iheart_podcast")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateNewTuneinPresetAndAlarm(formats strfmt.Registry) error {
	if swag.IsZero(m.NewTuneinPresetAndAlarm) { // not required
		return nil
	}

	if err := m.NewTuneinPresetAndAlarm.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("new_tunein_preset_and_alarm")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("new_tunein_preset_and_alarm")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validatePlmSupport(formats strfmt.Registry) error {
	if swag.IsZero(m.PlmSupport) { // not required
		return nil
	}

	if err := m.PlmSupport.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("plm_support")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("plm_support")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validatePowerMode(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerMode) { // not required
		return nil
	}

	if err := m.PowerMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("power_mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("power_mode")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validatePresetKey(formats strfmt.Registry) error {
	if swag.IsZero(m.PresetKey) { // not required
		return nil
	}

	if err := m.PresetKey.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("preset_key")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("preset_key")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validatePrivacyMode(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivacyMode) { // not required
		return nil
	}

	if err := m.PrivacyMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("privacy_mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("privacy_mode")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validatePromptStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.PromptStatus) { // not required
		return nil
	}

	if err := m.PromptStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("prompt_status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("prompt_status")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateSecuremode(formats strfmt.Registry) error {
	if swag.IsZero(m.Securemode) { // not required
		return nil
	}

	if err := m.Securemode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("securemode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("securemode")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateSecurityCapabilities(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityCapabilities) { // not required
		return nil
	}

	if m.SecurityCapabilities != nil {
		if err := m.SecurityCapabilities.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_capabilities")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_capabilities")
			}
			return err
		}
	}

	return nil
}

func (m *StatusEx) validateSetPlayModeEnable(formats strfmt.Registry) error {
	if swag.IsZero(m.SetPlayModeEnable) { // not required
		return nil
	}

	if err := m.SetPlayModeEnable.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("set_play_mode_enable")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("set_play_mode_enable")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateSetPlayModeGain(formats strfmt.Registry) error {
	if swag.IsZero(m.SetPlayModeGain) { // not required
		return nil
	}

	if err := m.SetPlayModeGain.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("set_play_mode_gain")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("set_play_mode_gain")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateSilenceOtaFlag(formats strfmt.Registry) error {
	if swag.IsZero(m.SilenceOtaFlag) { // not required
		return nil
	}

	if err := m.SilenceOtaFlag.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("silence_ota_flag")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("silence_ota_flag")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateStreams(formats strfmt.Registry) error {
	if swag.IsZero(m.Streams) { // not required
		return nil
	}

	if err := m.Streams.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("streams")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("streams")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateTemperatureCPU(formats strfmt.Registry) error {
	if swag.IsZero(m.TemperatureCPU) { // not required
		return nil
	}

	if err := m.TemperatureCPU.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("temperature_cpu")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("temperature_cpu")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateTemperaturePowerControl(formats strfmt.Registry) error {
	if swag.IsZero(m.TemperaturePowerControl) { // not required
		return nil
	}

	if err := m.TemperaturePowerControl.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("temperature_power_control")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("temperature_power_control")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateTemperatureTmp102(formats strfmt.Registry) error {
	if swag.IsZero(m.TemperatureTmp102) { // not required
		return nil
	}

	if err := m.TemperatureTmp102.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("temperature_tmp102")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("temperature_tmp102")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateUartPassPort(formats strfmt.Registry) error {
	if swag.IsZero(m.UartPassPort) { // not required
		return nil
	}

	if err := m.UartPassPort.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("uart_pass_port")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("uart_pass_port")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateUdisk(formats strfmt.Registry) error {
	if swag.IsZero(m.Udisk) { // not required
		return nil
	}

	if err := m.Udisk.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("udisk")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("udisk")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateUmount(formats strfmt.Registry) error {
	if swag.IsZero(m.Umount) { // not required
		return nil
	}

	if err := m.Umount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("umount")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("umount")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateUpdateCheckCount(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateCheckCount) { // not required
		return nil
	}

	if err := m.UpdateCheckCount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("update_check_count")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("update_check_count")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateVolumeControl(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeControl) { // not required
		return nil
	}

	if err := m.VolumeControl.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("volume_control")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("volume_control")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateWebFirmwareUpdateHide(formats strfmt.Registry) error {
	if swag.IsZero(m.WebFirmwareUpdateHide) { // not required
		return nil
	}

	if err := m.WebFirmwareUpdateHide.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("web_firmware_update_hide")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("web_firmware_update_hide")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateWlanDataRate(formats strfmt.Registry) error {
	if swag.IsZero(m.WlanDataRate) { // not required
		return nil
	}

	if err := m.WlanDataRate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("wlanDataRate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("wlanDataRate")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateWlanFreq(formats strfmt.Registry) error {
	if swag.IsZero(m.WlanFreq) { // not required
		return nil
	}

	if err := m.WlanFreq.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("wlanFreq")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("wlanFreq")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateWlanNoise(formats strfmt.Registry) error {
	if swag.IsZero(m.WlanNoise) { // not required
		return nil
	}

	if err := m.WlanNoise.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("wlanNoise")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("wlanNoise")
		}
		return err
	}

	return nil
}

func (m *StatusEx) validateWlanSnr(formats strfmt.Registry) error {
	if swag.IsZero(m.WlanSnr) { // not required
		return nil
	}

	if err := m.WlanSnr.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("wlanSnr")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("wlanSnr")
		}
		return err
	}

	return nil
}

// ContextValidate validate this status ex based on the context it is used
func (m *StatusEx) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAPMAC(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBTMAC(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBleRemoteConnected(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBleRemoteControl(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBleRemoteUpdateCheckedCounter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateETHMAC(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInitialConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMAC(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModuleColorNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRSSI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionUpdate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWifiChannel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAlexaBetaEnable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAlexaForceBetaCfg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBattery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBatteryPercent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCap1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCapability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCastEnable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCastUsageReport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommunicationPort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEssid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExpired(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHideSSID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInternet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLbcSupport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxVolume(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMqttSupport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetstat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNewIheartPodcast(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNewTuneinPresetAndAlarm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlmSupport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePresetKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrivacyMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePromptStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecuremode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityCapabilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSetPlayModeEnable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSetPlayModeGain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSilenceOtaFlag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStreams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemperatureCPU(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemperaturePowerControl(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemperatureTmp102(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUartPassPort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateCheckCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeControl(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebFirmwareUpdateHide(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWlanDataRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWlanFreq(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWlanNoise(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWlanSnr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatusEx) contextValidateAPMAC(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.APMAC) { // not required
		return nil
	}

	if err := m.APMAC.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AP_MAC")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AP_MAC")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateBTMAC(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.BTMAC) { // not required
		return nil
	}

	if err := m.BTMAC.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BTMAC")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BTMAC")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateBleRemoteConnected(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.BleRemoteConnected) { // not required
		return nil
	}

	if err := m.BleRemoteConnected.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BleRemoteConnected")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BleRemoteConnected")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateBleRemoteControl(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.BleRemoteControl) { // not required
		return nil
	}

	if err := m.BleRemoteControl.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BleRemoteControl")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BleRemoteControl")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateBleRemoteUpdateCheckedCounter(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.BleRemoteUpdateCheckedCounter) { // not required
		return nil
	}

	if err := m.BleRemoteUpdateCheckedCounter.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BleRemote_update_checked_counter")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BleRemote_update_checked_counter")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateETHMAC(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ETHMAC) { // not required
		return nil
	}

	if err := m.ETHMAC.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ETH_MAC")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ETH_MAC")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateInitialConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.InitialConfiguration) { // not required
		return nil
	}

	if err := m.InitialConfiguration.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("InitialConfiguration")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("InitialConfiguration")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateMAC(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.MAC) { // not required
		return nil
	}

	if err := m.MAC.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("MAC")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("MAC")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateModuleColorNumber(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ModuleColorNumber) { // not required
		return nil
	}

	if err := m.ModuleColorNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ModuleColorNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ModuleColorNumber")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateRSSI(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.RSSI) { // not required
		return nil
	}

	if err := m.RSSI.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RSSI")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RSSI")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateVersionUpdate(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.VersionUpdate) { // not required
		return nil
	}

	if err := m.VersionUpdate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionUpdate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionUpdate")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateWifiChannel(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.WifiChannel) { // not required
		return nil
	}

	if err := m.WifiChannel.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("WifiChannel")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("WifiChannel")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateAlexaBetaEnable(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.AlexaBetaEnable) { // not required
		return nil
	}

	if err := m.AlexaBetaEnable.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("alexa_beta_enable")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("alexa_beta_enable")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateAlexaForceBetaCfg(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.AlexaForceBetaCfg) { // not required
		return nil
	}

	if err := m.AlexaForceBetaCfg.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("alexa_force_beta_cfg")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("alexa_force_beta_cfg")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateBattery(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Battery) { // not required
		return nil
	}

	if err := m.Battery.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("battery")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("battery")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateBatteryPercent(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.BatteryPercent) { // not required
		return nil
	}

	if err := m.BatteryPercent.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("battery_percent")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("battery_percent")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateCap1(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Cap1) { // not required
		return nil
	}

	if err := m.Cap1.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cap1")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cap1")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateCapability(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Capability) { // not required
		return nil
	}

	if err := m.Capability.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("capability")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("capability")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateCastEnable(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.CastEnable) { // not required
		return nil
	}

	if err := m.CastEnable.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cast_enable")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cast_enable")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateCastUsageReport(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.CastUsageReport) { // not required
		return nil
	}

	if err := m.CastUsageReport.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cast_usage_report")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cast_usage_report")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateCommunicationPort(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.CommunicationPort) { // not required
		return nil
	}

	if err := m.CommunicationPort.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("communication_port")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("communication_port")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateEssid(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Essid) { // not required
		return nil
	}

	if err := m.Essid.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("essid")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("essid")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateExpired(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Expired) { // not required
		return nil
	}

	if err := m.Expired.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("expired")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("expired")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateGroup(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Group) { // not required
		return nil
	}

	if err := m.Group.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("group")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("group")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateHideSSID(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.HideSSID) { // not required
		return nil
	}

	if err := m.HideSSID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("hideSSID")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("hideSSID")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateInternet(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Internet) { // not required
		return nil
	}

	if err := m.Internet.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("internet")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("internet")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateLbcSupport(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.LbcSupport) { // not required
		return nil
	}

	if err := m.LbcSupport.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lbc_support")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lbc_support")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateMaxVolume(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.MaxVolume) { // not required
		return nil
	}

	if err := m.MaxVolume.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("max_volume")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("max_volume")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateMqttSupport(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.MqttSupport) { // not required
		return nil
	}

	if err := m.MqttSupport.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mqtt_support")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mqtt_support")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateNetstat(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Netstat) { // not required
		return nil
	}

	if err := m.Netstat.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("netstat")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("netstat")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateNewIheartPodcast(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.NewIheartPodcast) { // not required
		return nil
	}

	if err := m.NewIheartPodcast.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("new_iheart_podcast")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("new_iheart_podcast")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateNewTuneinPresetAndAlarm(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.NewTuneinPresetAndAlarm) { // not required
		return nil
	}

	if err := m.NewTuneinPresetAndAlarm.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("new_tunein_preset_and_alarm")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("new_tunein_preset_and_alarm")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidatePlmSupport(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PlmSupport) { // not required
		return nil
	}

	if err := m.PlmSupport.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("plm_support")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("plm_support")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidatePowerMode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PowerMode) { // not required
		return nil
	}

	if err := m.PowerMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("power_mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("power_mode")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidatePresetKey(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PresetKey) { // not required
		return nil
	}

	if err := m.PresetKey.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("preset_key")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("preset_key")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidatePrivacyMode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PrivacyMode) { // not required
		return nil
	}

	if err := m.PrivacyMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("privacy_mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("privacy_mode")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidatePromptStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PromptStatus) { // not required
		return nil
	}

	if err := m.PromptStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("prompt_status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("prompt_status")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateSecuremode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Securemode) { // not required
		return nil
	}

	if err := m.Securemode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("securemode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("securemode")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateSecurityCapabilities(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityCapabilities != nil {

		if swag.IsZero(m.SecurityCapabilities) { // not required
			return nil
		}

		if err := m.SecurityCapabilities.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_capabilities")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_capabilities")
			}
			return err
		}
	}

	return nil
}

func (m *StatusEx) contextValidateSetPlayModeEnable(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SetPlayModeEnable) { // not required
		return nil
	}

	if err := m.SetPlayModeEnable.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("set_play_mode_enable")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("set_play_mode_enable")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateSetPlayModeGain(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SetPlayModeGain) { // not required
		return nil
	}

	if err := m.SetPlayModeGain.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("set_play_mode_gain")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("set_play_mode_gain")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateSilenceOtaFlag(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SilenceOtaFlag) { // not required
		return nil
	}

	if err := m.SilenceOtaFlag.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("silence_ota_flag")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("silence_ota_flag")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateStreams(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Streams) { // not required
		return nil
	}

	if err := m.Streams.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("streams")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("streams")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateTemperatureCPU(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.TemperatureCPU) { // not required
		return nil
	}

	if err := m.TemperatureCPU.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("temperature_cpu")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("temperature_cpu")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateTemperaturePowerControl(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.TemperaturePowerControl) { // not required
		return nil
	}

	if err := m.TemperaturePowerControl.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("temperature_power_control")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("temperature_power_control")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateTemperatureTmp102(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.TemperatureTmp102) { // not required
		return nil
	}

	if err := m.TemperatureTmp102.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("temperature_tmp102")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("temperature_tmp102")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateUartPassPort(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.UartPassPort) { // not required
		return nil
	}

	if err := m.UartPassPort.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("uart_pass_port")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("uart_pass_port")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateUdisk(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Udisk) { // not required
		return nil
	}

	if err := m.Udisk.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("udisk")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("udisk")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateUmount(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Umount) { // not required
		return nil
	}

	if err := m.Umount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("umount")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("umount")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateUpdateCheckCount(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.UpdateCheckCount) { // not required
		return nil
	}

	if err := m.UpdateCheckCount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("update_check_count")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("update_check_count")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateVolumeControl(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.VolumeControl) { // not required
		return nil
	}

	if err := m.VolumeControl.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("volume_control")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("volume_control")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateWebFirmwareUpdateHide(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.WebFirmwareUpdateHide) { // not required
		return nil
	}

	if err := m.WebFirmwareUpdateHide.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("web_firmware_update_hide")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("web_firmware_update_hide")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateWlanDataRate(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.WlanDataRate) { // not required
		return nil
	}

	if err := m.WlanDataRate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("wlanDataRate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("wlanDataRate")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateWlanFreq(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.WlanFreq) { // not required
		return nil
	}

	if err := m.WlanFreq.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("wlanFreq")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("wlanFreq")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateWlanNoise(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.WlanNoise) { // not required
		return nil
	}

	if err := m.WlanNoise.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("wlanNoise")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("wlanNoise")
		}
		return err
	}

	return nil
}

func (m *StatusEx) contextValidateWlanSnr(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.WlanSnr) { // not required
		return nil
	}

	if err := m.WlanSnr.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("wlanSnr")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("wlanSnr")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StatusEx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatusEx) UnmarshalBinary(b []byte) error {
	var res StatusEx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StatusExSecurityCapabilities status ex security capabilities
//
// swagger:model StatusExSecurityCapabilities
type StatusExSecurityCapabilities struct {

	// aes ver
	AesVer string `json:"aes_ver,omitempty"`

	// ver
	Ver string `json:"ver,omitempty"`
}

// Validate validates this status ex security capabilities
func (m *StatusExSecurityCapabilities) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this status ex security capabilities based on context it is used
func (m *StatusExSecurityCapabilities) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StatusExSecurityCapabilities) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatusExSecurityCapabilities) UnmarshalBinary(b []byte) error {
	var res StatusExSecurityCapabilities
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

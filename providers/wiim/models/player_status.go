// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	extend "github.com/kihamo/boggart/protocols/swagger"
)

// PlayerStatus player status
//
// swagger:model PlayerStatus
type PlayerStatus struct {

	// [hexed string] of the album
	Album extend.HEXString `json:"Album,omitempty"`

	// [hexed string] of the artist
	Artist extend.HEXString `json:"Artist,omitempty"`

	// [hexed string] of the track title
	Title extend.HEXString `json:"Title,omitempty"`

	// alarmflag
	Alarmflag extend.IntegerAsString `json:"alarmflag,omitempty"`

	// Active channel(s) 0: Stereo 1: Left 2: Right
	//
	Ch extend.IntegerAsString `json:"ch,omitempty"`

	// Current playing position (in ms)
	Curpos extend.IntegerAsString `json:"curpos,omitempty"`

	// 	The current Equalizer setting
	Eq extend.IntegerAsString `json:"eq,omitempty"`

	// Is a Combination of SHUFFLE and REPEAT modes 0: SHUFFLE: disabled REPEAT: enabled - loop 1: SHUFFLE: disabled REPEAT: enabled - loop once 2: SHUFFLE: enabled REPEAT: enabled - loop 3: SHUFFLE: enabled REPEAT: disabled 4: SHUFFLE: disabled REPEAT: disabled 5: SHUFFLE: enabled REPEAT: enabled - loop once
	//
	Loop extend.IntegerAsString `json:"loop,omitempty"`

	// Playback mode 0: Idling 1: airplay streaming 2: DLNA streaming 10: Playing network content, e.g. vTuner, Home Media Share, Amazon Music, Deezer, etc. 11: playing UDISK(Local USB disk on Arylic Device) 20: playback start by HTTPAPI 31: Spotify Connect streaming 40: Line-In input mode 41: Bluetooth input mode 43: Optical input mode 47: Line-In #2 input mode 51: USBDAC input mode 99: The Device is a Guest in a Multiroom Zone
	//
	Mode extend.IntegerAsString `json:"mode,omitempty"`

	// The mute status 0: Not muted 1: Muted
	//
	Mute extend.BooleanAsString `json:"mute,omitempty"`

	// offset pts
	OffsetPts extend.IntegerAsString `json:"offset_pts,omitempty"`

	// The total number of tracks in the playlist
	Plicount extend.IntegerAsString `json:"plicount,omitempty"`

	// Index of current track in playlist
	Plicurr extend.IntegerAsString `json:"plicurr,omitempty"`

	// Device status stop: no audio selected play: playing audio load: load ?? pause: audio paused
	//
	Status string `json:"status,omitempty"`

	// Current track length (in ms)
	Totlen extend.IntegerAsString `json:"totlen,omitempty"`

	// 0: Main or standalone device 1: Device is a Multiroom Guest
	//
	Type extend.IntegerAsString `json:"type,omitempty"`

	// vendor
	Vendor string `json:"vendor,omitempty"`

	// Current volume Value range is from 0 - 100. So can be considered a linear percentage (0% to 100%)
	//
	Vol extend.IntegerAsString `json:"vol,omitempty"`
}

// Validate validates this player status
func (m *PlayerStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlbum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlarmflag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurpos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMute(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffsetPts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlicount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlicurr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotlen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlayerStatus) validateAlbum(formats strfmt.Registry) error {
	if swag.IsZero(m.Album) { // not required
		return nil
	}

	if err := m.Album.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Album")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Album")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) validateArtist(formats strfmt.Registry) error {
	if swag.IsZero(m.Artist) { // not required
		return nil
	}

	if err := m.Artist.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Artist")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Artist")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) validateTitle(formats strfmt.Registry) error {
	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := m.Title.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Title")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Title")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) validateAlarmflag(formats strfmt.Registry) error {
	if swag.IsZero(m.Alarmflag) { // not required
		return nil
	}

	if err := m.Alarmflag.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("alarmflag")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("alarmflag")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) validateCh(formats strfmt.Registry) error {
	if swag.IsZero(m.Ch) { // not required
		return nil
	}

	if err := m.Ch.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ch")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ch")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) validateCurpos(formats strfmt.Registry) error {
	if swag.IsZero(m.Curpos) { // not required
		return nil
	}

	if err := m.Curpos.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("curpos")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("curpos")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) validateEq(formats strfmt.Registry) error {
	if swag.IsZero(m.Eq) { // not required
		return nil
	}

	if err := m.Eq.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("eq")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("eq")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) validateLoop(formats strfmt.Registry) error {
	if swag.IsZero(m.Loop) { // not required
		return nil
	}

	if err := m.Loop.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("loop")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("loop")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if err := m.Mode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mode")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) validateMute(formats strfmt.Registry) error {
	if swag.IsZero(m.Mute) { // not required
		return nil
	}

	if err := m.Mute.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mute")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mute")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) validateOffsetPts(formats strfmt.Registry) error {
	if swag.IsZero(m.OffsetPts) { // not required
		return nil
	}

	if err := m.OffsetPts.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("offset_pts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("offset_pts")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) validatePlicount(formats strfmt.Registry) error {
	if swag.IsZero(m.Plicount) { // not required
		return nil
	}

	if err := m.Plicount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("plicount")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("plicount")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) validatePlicurr(formats strfmt.Registry) error {
	if swag.IsZero(m.Plicurr) { // not required
		return nil
	}

	if err := m.Plicurr.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("plicurr")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("plicurr")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) validateTotlen(formats strfmt.Registry) error {
	if swag.IsZero(m.Totlen) { // not required
		return nil
	}

	if err := m.Totlen.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("totlen")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("totlen")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) validateVol(formats strfmt.Registry) error {
	if swag.IsZero(m.Vol) { // not required
		return nil
	}

	if err := m.Vol.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vol")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("vol")
		}
		return err
	}

	return nil
}

// ContextValidate validate this player status based on the context it is used
func (m *PlayerStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlbum(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArtist(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTitle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAlarmflag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCh(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurpos(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEq(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoop(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMute(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffsetPts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlicount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlicurr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotlen(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVol(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlayerStatus) contextValidateAlbum(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Album) { // not required
		return nil
	}

	if err := m.Album.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Album")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Album")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) contextValidateArtist(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Artist) { // not required
		return nil
	}

	if err := m.Artist.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Artist")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Artist")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) contextValidateTitle(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := m.Title.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Title")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Title")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) contextValidateAlarmflag(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Alarmflag) { // not required
		return nil
	}

	if err := m.Alarmflag.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("alarmflag")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("alarmflag")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) contextValidateCh(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Ch) { // not required
		return nil
	}

	if err := m.Ch.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ch")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ch")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) contextValidateCurpos(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Curpos) { // not required
		return nil
	}

	if err := m.Curpos.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("curpos")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("curpos")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) contextValidateEq(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Eq) { // not required
		return nil
	}

	if err := m.Eq.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("eq")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("eq")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) contextValidateLoop(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Loop) { // not required
		return nil
	}

	if err := m.Loop.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("loop")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("loop")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) contextValidateMode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if err := m.Mode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mode")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) contextValidateMute(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Mute) { // not required
		return nil
	}

	if err := m.Mute.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mute")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mute")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) contextValidateOffsetPts(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.OffsetPts) { // not required
		return nil
	}

	if err := m.OffsetPts.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("offset_pts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("offset_pts")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) contextValidatePlicount(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Plicount) { // not required
		return nil
	}

	if err := m.Plicount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("plicount")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("plicount")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) contextValidatePlicurr(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Plicurr) { // not required
		return nil
	}

	if err := m.Plicurr.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("plicurr")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("plicurr")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) contextValidateTotlen(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Totlen) { // not required
		return nil
	}

	if err := m.Totlen.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("totlen")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("totlen")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *PlayerStatus) contextValidateVol(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Vol) { // not required
		return nil
	}

	if err := m.Vol.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vol")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("vol")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlayerStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlayerStatus) UnmarshalBinary(b []byte) error {
	var res PlayerStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

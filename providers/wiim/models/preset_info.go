// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	extend "github.com/kihamo/boggart/protocols/swagger"
)

// PresetInfo preset info
//
// swagger:model PresetInfo
type PresetInfo struct {

	// preset list
	PresetList []*PresetInfoPresetListItems0 `json:"preset_list"`

	// preset num
	PresetNum int64 `json:"preset_num,omitempty"`
}

// Validate validates this preset info
func (m *PresetInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePresetList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PresetInfo) validatePresetList(formats strfmt.Registry) error {
	if swag.IsZero(m.PresetList) { // not required
		return nil
	}

	for i := 0; i < len(m.PresetList); i++ {
		if swag.IsZero(m.PresetList[i]) { // not required
			continue
		}

		if m.PresetList[i] != nil {
			if err := m.PresetList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preset_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("preset_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this preset info based on the context it is used
func (m *PresetInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePresetList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PresetInfo) contextValidatePresetList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PresetList); i++ {

		if m.PresetList[i] != nil {

			if swag.IsZero(m.PresetList[i]) { // not required
				return nil
			}

			if err := m.PresetList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preset_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("preset_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PresetInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PresetInfo) UnmarshalBinary(b []byte) error {
	var res PresetInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PresetInfoPresetListItems0 preset info preset list items0
//
// swagger:model PresetInfoPresetListItems0
type PresetInfoPresetListItems0 struct {

	// Playlist name
	Name string `json:"name,omitempty"`

	// Preset index (Start from 1)
	Number extend.IntegerAsString `json:"number,omitempty"`

	// Cover picture url
	Picurl string `json:"picurl,omitempty"`

	// Preset list information
	PresetList string `json:"preset_list,omitempty"`

	// Total number of Presets
	PresetNum extend.IntegerAsString `json:"preset_num,omitempty"`

	// Music source
	Source string `json:"source,omitempty"`

	// Play url
	URL string `json:"url,omitempty"`
}

// Validate validates this preset info preset list items0
func (m *PresetInfoPresetListItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePresetNum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PresetInfoPresetListItems0) validateNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.Number) { // not required
		return nil
	}

	if err := m.Number.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("number")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("number")
		}
		return err
	}

	return nil
}

func (m *PresetInfoPresetListItems0) validatePresetNum(formats strfmt.Registry) error {
	if swag.IsZero(m.PresetNum) { // not required
		return nil
	}

	if err := m.PresetNum.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("preset_num")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("preset_num")
		}
		return err
	}

	return nil
}

// ContextValidate validate this preset info preset list items0 based on the context it is used
func (m *PresetInfoPresetListItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePresetNum(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PresetInfoPresetListItems0) contextValidateNumber(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Number) { // not required
		return nil
	}

	if err := m.Number.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("number")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("number")
		}
		return err
	}

	return nil
}

func (m *PresetInfoPresetListItems0) contextValidatePresetNum(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PresetNum) { // not required
		return nil
	}

	if err := m.PresetNum.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("preset_num")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("preset_num")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PresetInfoPresetListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PresetInfoPresetListItems0) UnmarshalBinary(b []byte) error {
	var res PresetInfoPresetListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

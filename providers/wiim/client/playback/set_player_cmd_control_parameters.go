// Code generated by go-swagger; DO NOT EDIT.

package playback

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSetPlayerCmdControlParams creates a new SetPlayerCmdControlParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSetPlayerCmdControlParams() *SetPlayerCmdControlParams {
	return &SetPlayerCmdControlParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSetPlayerCmdControlParamsWithTimeout creates a new SetPlayerCmdControlParams object
// with the ability to set a timeout on a request.
func NewSetPlayerCmdControlParamsWithTimeout(timeout time.Duration) *SetPlayerCmdControlParams {
	return &SetPlayerCmdControlParams{
		timeout: timeout,
	}
}

// NewSetPlayerCmdControlParamsWithContext creates a new SetPlayerCmdControlParams object
// with the ability to set a context for a request.
func NewSetPlayerCmdControlParamsWithContext(ctx context.Context) *SetPlayerCmdControlParams {
	return &SetPlayerCmdControlParams{
		Context: ctx,
	}
}

// NewSetPlayerCmdControlParamsWithHTTPClient creates a new SetPlayerCmdControlParams object
// with the ability to set a custom HTTPClient for a request.
func NewSetPlayerCmdControlParamsWithHTTPClient(client *http.Client) *SetPlayerCmdControlParams {
	return &SetPlayerCmdControlParams{
		HTTPClient: client,
	}
}

/*
SetPlayerCmdControlParams contains all the parameters to send to the API endpoint

	for the set player cmd control operation.

	Typically these are written to a http.Request.
*/
type SetPlayerCmdControlParams struct {

	/* Control.

	   onepause	Toggle Play/Pause stop	Stop current playback and removes slected source from device prev	Play previous song in playlist next	Play next song in playlist pause	Pause current playback resume	Resume playback from last position, if it is paused

	*/
	Control string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the set player cmd control params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SetPlayerCmdControlParams) WithDefaults() *SetPlayerCmdControlParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the set player cmd control params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SetPlayerCmdControlParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the set player cmd control params
func (o *SetPlayerCmdControlParams) WithTimeout(timeout time.Duration) *SetPlayerCmdControlParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set player cmd control params
func (o *SetPlayerCmdControlParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set player cmd control params
func (o *SetPlayerCmdControlParams) WithContext(ctx context.Context) *SetPlayerCmdControlParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set player cmd control params
func (o *SetPlayerCmdControlParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set player cmd control params
func (o *SetPlayerCmdControlParams) WithHTTPClient(client *http.Client) *SetPlayerCmdControlParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set player cmd control params
func (o *SetPlayerCmdControlParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithControl adds the control to the set player cmd control params
func (o *SetPlayerCmdControlParams) WithControl(control string) *SetPlayerCmdControlParams {
	o.SetControl(control)
	return o
}

// SetControl adds the control to the set player cmd control params
func (o *SetPlayerCmdControlParams) SetControl(control string) {
	o.Control = control
}

// WriteToRequest writes these params to a swagger request
func (o *SetPlayerCmdControlParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param control
	if err := r.SetPathParam("control", o.Control); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/kihamo/boggart/providers/smcenter/models"
)

// GetRequestListReader is a Reader for the GetRequestList structure.
type GetRequestListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRequestListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRequestListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRequestListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetRequestListDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetRequestListOK creates a GetRequestListOK with default headers values
func NewGetRequestListOK() *GetRequestListOK {
	return &GetRequestListOK{}
}

/*
GetRequestListOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetRequestListOK struct {
	Payload *GetRequestListOKBody
}

// IsSuccess returns true when this get request list o k response has a 2xx status code
func (o *GetRequestListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get request list o k response has a 3xx status code
func (o *GetRequestListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get request list o k response has a 4xx status code
func (o *GetRequestListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get request list o k response has a 5xx status code
func (o *GetRequestListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get request list o k response a status code equal to that given
func (o *GetRequestListOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get request list o k response
func (o *GetRequestListOK) Code() int {
	return 200
}

func (o *GetRequestListOK) Error() string {
	return fmt.Sprintf("[GET /Requests/List][%d] getRequestListOK  %+v", 200, o.Payload)
}

func (o *GetRequestListOK) String() string {
	return fmt.Sprintf("[GET /Requests/List][%d] getRequestListOK  %+v", 200, o.Payload)
}

func (o *GetRequestListOK) GetPayload() *GetRequestListOKBody {
	return o.Payload
}

func (o *GetRequestListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetRequestListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRequestListUnauthorized creates a GetRequestListUnauthorized with default headers values
func NewGetRequestListUnauthorized() *GetRequestListUnauthorized {
	return &GetRequestListUnauthorized{}
}

/*
GetRequestListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetRequestListUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get request list unauthorized response has a 2xx status code
func (o *GetRequestListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get request list unauthorized response has a 3xx status code
func (o *GetRequestListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get request list unauthorized response has a 4xx status code
func (o *GetRequestListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get request list unauthorized response has a 5xx status code
func (o *GetRequestListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get request list unauthorized response a status code equal to that given
func (o *GetRequestListUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get request list unauthorized response
func (o *GetRequestListUnauthorized) Code() int {
	return 401
}

func (o *GetRequestListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /Requests/List][%d] getRequestListUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRequestListUnauthorized) String() string {
	return fmt.Sprintf("[GET /Requests/List][%d] getRequestListUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRequestListUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRequestListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRequestListDefault creates a GetRequestListDefault with default headers values
func NewGetRequestListDefault(code int) *GetRequestListDefault {
	return &GetRequestListDefault{
		_statusCode: code,
	}
}

/*
GetRequestListDefault describes a response with status code -1, with default header values.

Unexpected error
*/
type GetRequestListDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this get request list default response has a 2xx status code
func (o *GetRequestListDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get request list default response has a 3xx status code
func (o *GetRequestListDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get request list default response has a 4xx status code
func (o *GetRequestListDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get request list default response has a 5xx status code
func (o *GetRequestListDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get request list default response a status code equal to that given
func (o *GetRequestListDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get request list default response
func (o *GetRequestListDefault) Code() int {
	return o._statusCode
}

func (o *GetRequestListDefault) Error() string {
	return fmt.Sprintf("[GET /Requests/List][%d] getRequestList default  %+v", o._statusCode, o.Payload)
}

func (o *GetRequestListDefault) String() string {
	return fmt.Sprintf("[GET /Requests/List][%d] getRequestList default  %+v", o._statusCode, o.Payload)
}

func (o *GetRequestListDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRequestListDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetRequestListOKBody get request list o k body
swagger:model GetRequestListOKBody
*/
type GetRequestListOKBody struct {

	// requests
	Requests []*models.Request `json:"Requests"`
}

// Validate validates this get request list o k body
func (o *GetRequestListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRequests(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRequestListOKBody) validateRequests(formats strfmt.Registry) error {
	if swag.IsZero(o.Requests) { // not required
		return nil
	}

	for i := 0; i < len(o.Requests); i++ {
		if swag.IsZero(o.Requests[i]) { // not required
			continue
		}

		if o.Requests[i] != nil {
			if err := o.Requests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getRequestListOK" + "." + "Requests" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getRequestListOK" + "." + "Requests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get request list o k body based on the context it is used
func (o *GetRequestListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRequests(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRequestListOKBody) contextValidateRequests(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Requests); i++ {

		if o.Requests[i] != nil {

			if swag.IsZero(o.Requests[i]) { // not required
				return nil
			}

			if err := o.Requests[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getRequestListOK" + "." + "Requests" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getRequestListOK" + "." + "Requests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetRequestListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRequestListOKBody) UnmarshalBinary(b []byte) error {
	var res GetRequestListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

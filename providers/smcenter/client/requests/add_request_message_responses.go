// Code generated by go-swagger; DO NOT EDIT.

package requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/kihamo/boggart/providers/smcenter/models"
)

// AddRequestMessageReader is a Reader for the AddRequestMessage structure.
type AddRequestMessageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddRequestMessageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddRequestMessageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAddRequestMessageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAddRequestMessageDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddRequestMessageOK creates a AddRequestMessageOK with default headers values
func NewAddRequestMessageOK() *AddRequestMessageOK {
	return &AddRequestMessageOK{}
}

/*
AddRequestMessageOK describes a response with status code 200, with default header values.

Successful operation
*/
type AddRequestMessageOK struct {
	Payload *models.OperationResult
}

// IsSuccess returns true when this add request message o k response has a 2xx status code
func (o *AddRequestMessageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add request message o k response has a 3xx status code
func (o *AddRequestMessageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add request message o k response has a 4xx status code
func (o *AddRequestMessageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add request message o k response has a 5xx status code
func (o *AddRequestMessageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add request message o k response a status code equal to that given
func (o *AddRequestMessageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add request message o k response
func (o *AddRequestMessageOK) Code() int {
	return 200
}

func (o *AddRequestMessageOK) Error() string {
	return fmt.Sprintf("[POST /Requests/AddMessage][%d] addRequestMessageOK  %+v", 200, o.Payload)
}

func (o *AddRequestMessageOK) String() string {
	return fmt.Sprintf("[POST /Requests/AddMessage][%d] addRequestMessageOK  %+v", 200, o.Payload)
}

func (o *AddRequestMessageOK) GetPayload() *models.OperationResult {
	return o.Payload
}

func (o *AddRequestMessageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OperationResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddRequestMessageUnauthorized creates a AddRequestMessageUnauthorized with default headers values
func NewAddRequestMessageUnauthorized() *AddRequestMessageUnauthorized {
	return &AddRequestMessageUnauthorized{}
}

/*
AddRequestMessageUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AddRequestMessageUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this add request message unauthorized response has a 2xx status code
func (o *AddRequestMessageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add request message unauthorized response has a 3xx status code
func (o *AddRequestMessageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add request message unauthorized response has a 4xx status code
func (o *AddRequestMessageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add request message unauthorized response has a 5xx status code
func (o *AddRequestMessageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add request message unauthorized response a status code equal to that given
func (o *AddRequestMessageUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the add request message unauthorized response
func (o *AddRequestMessageUnauthorized) Code() int {
	return 401
}

func (o *AddRequestMessageUnauthorized) Error() string {
	return fmt.Sprintf("[POST /Requests/AddMessage][%d] addRequestMessageUnauthorized  %+v", 401, o.Payload)
}

func (o *AddRequestMessageUnauthorized) String() string {
	return fmt.Sprintf("[POST /Requests/AddMessage][%d] addRequestMessageUnauthorized  %+v", 401, o.Payload)
}

func (o *AddRequestMessageUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddRequestMessageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddRequestMessageDefault creates a AddRequestMessageDefault with default headers values
func NewAddRequestMessageDefault(code int) *AddRequestMessageDefault {
	return &AddRequestMessageDefault{
		_statusCode: code,
	}
}

/*
AddRequestMessageDefault describes a response with status code -1, with default header values.

Unexpected error
*/
type AddRequestMessageDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this add request message default response has a 2xx status code
func (o *AddRequestMessageDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this add request message default response has a 3xx status code
func (o *AddRequestMessageDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this add request message default response has a 4xx status code
func (o *AddRequestMessageDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this add request message default response has a 5xx status code
func (o *AddRequestMessageDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this add request message default response a status code equal to that given
func (o *AddRequestMessageDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the add request message default response
func (o *AddRequestMessageDefault) Code() int {
	return o._statusCode
}

func (o *AddRequestMessageDefault) Error() string {
	return fmt.Sprintf("[POST /Requests/AddMessage][%d] addRequestMessage default  %+v", o._statusCode, o.Payload)
}

func (o *AddRequestMessageDefault) String() string {
	return fmt.Sprintf("[POST /Requests/AddMessage][%d] addRequestMessage default  %+v", o._statusCode, o.Payload)
}

func (o *AddRequestMessageDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddRequestMessageDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
AddRequestMessageBody add request message body
swagger:model AddRequestMessageBody
*/
type AddRequestMessageBody struct {

	// request Id
	RequestID uint64 `json:"RequestId,omitempty"`

	// text
	Text string `json:"Text,omitempty"`
}

// Validate validates this add request message body
func (o *AddRequestMessageBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add request message body based on context it is used
func (o *AddRequestMessageBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddRequestMessageBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddRequestMessageBody) UnmarshalBinary(b []byte) error {
	var res AddRequestMessageBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

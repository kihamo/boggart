// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/kihamo/boggart/providers/smcenter/models"
)

// LoginReader is a Reader for the Login structure.
type LoginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLoginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewLoginUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewLoginDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewLoginOK creates a LoginOK with default headers values
func NewLoginOK() *LoginOK {
	return &LoginOK{}
}

/*
LoginOK describes a response with status code 200, with default header values.

Successful operation
*/
type LoginOK struct {
	Payload *models.Account
}

// IsSuccess returns true when this login o k response has a 2xx status code
func (o *LoginOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login o k response has a 3xx status code
func (o *LoginOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login o k response has a 4xx status code
func (o *LoginOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this login o k response has a 5xx status code
func (o *LoginOK) IsServerError() bool {
	return false
}

// IsCode returns true when this login o k response a status code equal to that given
func (o *LoginOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the login o k response
func (o *LoginOK) Code() int {
	return 200
}

func (o *LoginOK) Error() string {
	return fmt.Sprintf("[POST /auth/Login][%d] loginOK  %+v", 200, o.Payload)
}

func (o *LoginOK) String() string {
	return fmt.Sprintf("[POST /auth/Login][%d] loginOK  %+v", 200, o.Payload)
}

func (o *LoginOK) GetPayload() *models.Account {
	return o.Payload
}

func (o *LoginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Account)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginUnauthorized creates a LoginUnauthorized with default headers values
func NewLoginUnauthorized() *LoginUnauthorized {
	return &LoginUnauthorized{}
}

/*
LoginUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type LoginUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this login unauthorized response has a 2xx status code
func (o *LoginUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login unauthorized response has a 3xx status code
func (o *LoginUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login unauthorized response has a 4xx status code
func (o *LoginUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this login unauthorized response has a 5xx status code
func (o *LoginUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this login unauthorized response a status code equal to that given
func (o *LoginUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the login unauthorized response
func (o *LoginUnauthorized) Code() int {
	return 401
}

func (o *LoginUnauthorized) Error() string {
	return fmt.Sprintf("[POST /auth/Login][%d] loginUnauthorized  %+v", 401, o.Payload)
}

func (o *LoginUnauthorized) String() string {
	return fmt.Sprintf("[POST /auth/Login][%d] loginUnauthorized  %+v", 401, o.Payload)
}

func (o *LoginUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *LoginUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginDefault creates a LoginDefault with default headers values
func NewLoginDefault(code int) *LoginDefault {
	return &LoginDefault{
		_statusCode: code,
	}
}

/*
LoginDefault describes a response with status code -1, with default header values.

Unexpected error
*/
type LoginDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this login default response has a 2xx status code
func (o *LoginDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this login default response has a 3xx status code
func (o *LoginDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this login default response has a 4xx status code
func (o *LoginDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this login default response has a 5xx status code
func (o *LoginDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this login default response a status code equal to that given
func (o *LoginDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the login default response
func (o *LoginDefault) Code() int {
	return o._statusCode
}

func (o *LoginDefault) Error() string {
	return fmt.Sprintf("[POST /auth/Login][%d] login default  %+v", o._statusCode, o.Payload)
}

func (o *LoginDefault) String() string {
	return fmt.Sprintf("[POST /auth/Login][%d] login default  %+v", o._statusCode, o.Payload)
}

func (o *LoginDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *LoginDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
LoginBody login body
swagger:model LoginBody
*/
type LoginBody struct {

	// password
	Password string `json:"password,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`
}

// Validate validates this login body
func (o *LoginBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this login body based on context it is used
func (o *LoginBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LoginBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LoginBody) UnmarshalBinary(b []byte) error {
	var res LoginBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

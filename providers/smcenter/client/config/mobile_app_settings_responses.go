// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kihamo/boggart/providers/smcenter/models"
)

// MobileAppSettingsReader is a Reader for the MobileAppSettings structure.
type MobileAppSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MobileAppSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMobileAppSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewMobileAppSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewMobileAppSettingsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewMobileAppSettingsOK creates a MobileAppSettingsOK with default headers values
func NewMobileAppSettingsOK() *MobileAppSettingsOK {
	return &MobileAppSettingsOK{}
}

/* MobileAppSettingsOK describes a response with status code 200, with default header values.

Successful operation
*/
type MobileAppSettingsOK struct {
	Payload *models.MobileAppSettings
}

func (o *MobileAppSettingsOK) Error() string {
	return fmt.Sprintf("[GET /Config/MobileAppSettings][%d] mobileAppSettingsOK  %+v", 200, o.Payload)
}
func (o *MobileAppSettingsOK) GetPayload() *models.MobileAppSettings {
	return o.Payload
}

func (o *MobileAppSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MobileAppSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMobileAppSettingsUnauthorized creates a MobileAppSettingsUnauthorized with default headers values
func NewMobileAppSettingsUnauthorized() *MobileAppSettingsUnauthorized {
	return &MobileAppSettingsUnauthorized{}
}

/* MobileAppSettingsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type MobileAppSettingsUnauthorized struct {
	Payload *models.Error
}

func (o *MobileAppSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /Config/MobileAppSettings][%d] mobileAppSettingsUnauthorized  %+v", 401, o.Payload)
}
func (o *MobileAppSettingsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *MobileAppSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMobileAppSettingsDefault creates a MobileAppSettingsDefault with default headers values
func NewMobileAppSettingsDefault(code int) *MobileAppSettingsDefault {
	return &MobileAppSettingsDefault{
		_statusCode: code,
	}
}

/* MobileAppSettingsDefault describes a response with status code -1, with default header values.

Unexpected error
*/
type MobileAppSettingsDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the mobile app settings default response
func (o *MobileAppSettingsDefault) Code() int {
	return o._statusCode
}

func (o *MobileAppSettingsDefault) Error() string {
	return fmt.Sprintf("[GET /Config/MobileAppSettings][%d] mobileAppSettings default  %+v", o._statusCode, o.Payload)
}
func (o *MobileAppSettingsDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *MobileAppSettingsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

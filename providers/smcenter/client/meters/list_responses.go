// Code generated by go-swagger; DO NOT EDIT.

package meters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/kihamo/boggart/providers/smcenter/models"
)

// ListReader is a Reader for the List structure.
type ListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewListDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListOK creates a ListOK with default headers values
func NewListOK() *ListOK {
	return &ListOK{}
}

/*
ListOK describes a response with status code 200, with default header values.

Successful operation
*/
type ListOK struct {
	Payload *ListOKBody
}

// IsSuccess returns true when this list o k response has a 2xx status code
func (o *ListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list o k response has a 3xx status code
func (o *ListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list o k response has a 4xx status code
func (o *ListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list o k response has a 5xx status code
func (o *ListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list o k response a status code equal to that given
func (o *ListOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list o k response
func (o *ListOK) Code() int {
	return 200
}

func (o *ListOK) Error() string {
	return fmt.Sprintf("[GET /Meters/List][%d] listOK  %+v", 200, o.Payload)
}

func (o *ListOK) String() string {
	return fmt.Sprintf("[GET /Meters/List][%d] listOK  %+v", 200, o.Payload)
}

func (o *ListOK) GetPayload() *ListOKBody {
	return o.Payload
}

func (o *ListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUnauthorized creates a ListUnauthorized with default headers values
func NewListUnauthorized() *ListUnauthorized {
	return &ListUnauthorized{}
}

/*
ListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this list unauthorized response has a 2xx status code
func (o *ListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list unauthorized response has a 3xx status code
func (o *ListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list unauthorized response has a 4xx status code
func (o *ListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list unauthorized response has a 5xx status code
func (o *ListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list unauthorized response a status code equal to that given
func (o *ListUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list unauthorized response
func (o *ListUnauthorized) Code() int {
	return 401
}

func (o *ListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /Meters/List][%d] listUnauthorized  %+v", 401, o.Payload)
}

func (o *ListUnauthorized) String() string {
	return fmt.Sprintf("[GET /Meters/List][%d] listUnauthorized  %+v", 401, o.Payload)
}

func (o *ListUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDefault creates a ListDefault with default headers values
func NewListDefault(code int) *ListDefault {
	return &ListDefault{
		_statusCode: code,
	}
}

/*
ListDefault describes a response with status code -1, with default header values.

Unexpected error
*/
type ListDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this list default response has a 2xx status code
func (o *ListDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list default response has a 3xx status code
func (o *ListDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list default response has a 4xx status code
func (o *ListDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list default response has a 5xx status code
func (o *ListDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list default response a status code equal to that given
func (o *ListDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the list default response
func (o *ListDefault) Code() int {
	return o._statusCode
}

func (o *ListDefault) Error() string {
	return fmt.Sprintf("[GET /Meters/List][%d] list default  %+v", o._statusCode, o.Payload)
}

func (o *ListDefault) String() string {
	return fmt.Sprintf("[GET /Meters/List][%d] list default  %+v", o._statusCode, o.Payload)
}

func (o *ListDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ListOKBody list o k body
swagger:model ListOKBody
*/
type ListOKBody struct {

	// data
	Data []*models.Meter `json:"Data"`
}

// Validate validates this list o k body
func (o *ListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listOK" + "." + "Data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listOK" + "." + "Data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list o k body based on the context it is used
func (o *ListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listOK" + "." + "Data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listOK" + "." + "Data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListOKBody) UnmarshalBinary(b []byte) error {
	var res ListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

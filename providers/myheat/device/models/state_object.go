// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StateObject state object
//
// swagger:model StateObject
type StateObject struct {

	// Engineering equipment
	EngineeringEquipment []*Device `json:"engs"`

	// environments
	Environments []*Device `json:"envs"`

	// heating mode
	HeatMode int64 `json:"hMode,omitempty"`

	// heat modes
	HeatModes []*DictionaryItem `json:"hModes"`

	// schedules
	Schedules []*DictionaryItem `json:"scheds"`

	// alarms
	Alarms []*Device `json:"alarms"`

	// device flags
	DeviceFlags int64 `json:"deviceFlags,omitempty"`

	// device severity level
	DeviceSeverity int64 `json:"deviceSeverity,omitempty"`

	// heaters
	Heaters []*Device `json:"heaters"`

	// Security mode enabled or disabled. Activate in control panel
	SecurityArmed *bool `json:"securityArmed,omitempty"`

	// sim balance
	SimBalance float64 `json:"simBalance,omitempty"`

	// sim signal
	SimSignal int64 `json:"simSignal,omitempty"`
}

// Validate validates this state object
func (m *StateObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEngineeringEquipment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeatModes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlarms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StateObject) validateEngineeringEquipment(formats strfmt.Registry) error {
	if swag.IsZero(m.EngineeringEquipment) { // not required
		return nil
	}

	for i := 0; i < len(m.EngineeringEquipment); i++ {
		if swag.IsZero(m.EngineeringEquipment[i]) { // not required
			continue
		}

		if m.EngineeringEquipment[i] != nil {
			if err := m.EngineeringEquipment[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("engs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("engs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StateObject) validateEnvironments(formats strfmt.Registry) error {
	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	for i := 0; i < len(m.Environments); i++ {
		if swag.IsZero(m.Environments[i]) { // not required
			continue
		}

		if m.Environments[i] != nil {
			if err := m.Environments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("envs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("envs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StateObject) validateHeatModes(formats strfmt.Registry) error {
	if swag.IsZero(m.HeatModes) { // not required
		return nil
	}

	for i := 0; i < len(m.HeatModes); i++ {
		if swag.IsZero(m.HeatModes[i]) { // not required
			continue
		}

		if m.HeatModes[i] != nil {
			if err := m.HeatModes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hModes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hModes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StateObject) validateSchedules(formats strfmt.Registry) error {
	if swag.IsZero(m.Schedules) { // not required
		return nil
	}

	for i := 0; i < len(m.Schedules); i++ {
		if swag.IsZero(m.Schedules[i]) { // not required
			continue
		}

		if m.Schedules[i] != nil {
			if err := m.Schedules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scheds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scheds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StateObject) validateAlarms(formats strfmt.Registry) error {
	if swag.IsZero(m.Alarms) { // not required
		return nil
	}

	for i := 0; i < len(m.Alarms); i++ {
		if swag.IsZero(m.Alarms[i]) { // not required
			continue
		}

		if m.Alarms[i] != nil {
			if err := m.Alarms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alarms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("alarms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StateObject) validateHeaters(formats strfmt.Registry) error {
	if swag.IsZero(m.Heaters) { // not required
		return nil
	}

	for i := 0; i < len(m.Heaters); i++ {
		if swag.IsZero(m.Heaters[i]) { // not required
			continue
		}

		if m.Heaters[i] != nil {
			if err := m.Heaters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("heaters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("heaters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this state object based on the context it is used
func (m *StateObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEngineeringEquipment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnvironments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeatModes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchedules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAlarms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeaters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StateObject) contextValidateEngineeringEquipment(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EngineeringEquipment); i++ {

		if m.EngineeringEquipment[i] != nil {
			if err := m.EngineeringEquipment[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("engs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("engs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StateObject) contextValidateEnvironments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Environments); i++ {

		if m.Environments[i] != nil {
			if err := m.Environments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("envs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("envs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StateObject) contextValidateHeatModes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HeatModes); i++ {

		if m.HeatModes[i] != nil {
			if err := m.HeatModes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hModes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hModes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StateObject) contextValidateSchedules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Schedules); i++ {

		if m.Schedules[i] != nil {
			if err := m.Schedules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scheds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scheds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StateObject) contextValidateAlarms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Alarms); i++ {

		if m.Alarms[i] != nil {
			if err := m.Alarms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alarms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("alarms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StateObject) contextValidateHeaters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Heaters); i++ {

		if m.Heaters[i] != nil {
			if err := m.Heaters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("heaters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("heaters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StateObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StateObject) UnmarshalBinary(b []byte) error {
	var res StateObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

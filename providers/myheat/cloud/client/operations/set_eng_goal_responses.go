// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/kihamo/boggart/providers/myheat/cloud/models"
)

// SetEngGoalReader is a Reader for the SetEngGoal structure.
type SetEngGoalReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetEngGoalReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetEngGoalOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewSetEngGoalDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSetEngGoalOK creates a SetEngGoalOK with default headers values
func NewSetEngGoalOK() *SetEngGoalOK {
	return &SetEngGoalOK{}
}

/*
SetEngGoalOK describes a response with status code 200, with default header values.

Successful
*/
type SetEngGoalOK struct {
	Payload *models.Error
}

// IsSuccess returns true when this set eng goal o k response has a 2xx status code
func (o *SetEngGoalOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set eng goal o k response has a 3xx status code
func (o *SetEngGoalOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set eng goal o k response has a 4xx status code
func (o *SetEngGoalOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this set eng goal o k response has a 5xx status code
func (o *SetEngGoalOK) IsServerError() bool {
	return false
}

// IsCode returns true when this set eng goal o k response a status code equal to that given
func (o *SetEngGoalOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the set eng goal o k response
func (o *SetEngGoalOK) Code() int {
	return 200
}

func (o *SetEngGoalOK) Error() string {
	return fmt.Sprintf("[POST /request/?setEngGoal][%d] setEngGoalOK  %+v", 200, o.Payload)
}

func (o *SetEngGoalOK) String() string {
	return fmt.Sprintf("[POST /request/?setEngGoal][%d] setEngGoalOK  %+v", 200, o.Payload)
}

func (o *SetEngGoalOK) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetEngGoalOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetEngGoalDefault creates a SetEngGoalDefault with default headers values
func NewSetEngGoalDefault(code int) *SetEngGoalDefault {
	return &SetEngGoalDefault{
		_statusCode: code,
	}
}

/*
SetEngGoalDefault describes a response with status code -1, with default header values.

Unexpected error
*/
type SetEngGoalDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this set eng goal default response has a 2xx status code
func (o *SetEngGoalDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this set eng goal default response has a 3xx status code
func (o *SetEngGoalDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this set eng goal default response has a 4xx status code
func (o *SetEngGoalDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this set eng goal default response has a 5xx status code
func (o *SetEngGoalDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this set eng goal default response a status code equal to that given
func (o *SetEngGoalDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the set eng goal default response
func (o *SetEngGoalDefault) Code() int {
	return o._statusCode
}

func (o *SetEngGoalDefault) Error() string {
	return fmt.Sprintf("[POST /request/?setEngGoal][%d] setEngGoal default  %+v", o._statusCode, o.Payload)
}

func (o *SetEngGoalDefault) String() string {
	return fmt.Sprintf("[POST /request/?setEngGoal][%d] setEngGoal default  %+v", o._statusCode, o.Payload)
}

func (o *SetEngGoalDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetEngGoalDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
SetEngGoalBody set eng goal body
swagger:model SetEngGoalBody
*/
type SetEngGoalBody struct {

	// Возможные значения: a. 0 – если в данный момент активен режим отопления, то режим будет сброшен. Система перейдет в состояние «Режим не выбран». b. значение не указано – аналогично значению «0». c. 1 – если в данный момент активен режим отопления, то в данный режим будут внесены соответствующие изменения (то есть – будет изменено целевое значение среды).
	// Enum: [0 1]
	ChangeMode int64 `json:"changeMode,omitempty"`

	// Идентификатора контроллера
	// Required: true
	DeviceID int64 `json:"deviceId"`

	// Возможные значения: a. -1 (или любое отрицательное число) – автоматический режим b. 0 – принудительно выключено c. 1 – принудительно включено
	Goal int64 `json:"goal,omitempty"`

	// Идентификатор инженерного оборудования
	// Required: true
	ObjID int64 `json:"objId"`
}

// Validate validates this set eng goal body
func (o *SetEngGoalBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChangeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateObjID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var setEngGoalBodyTypeChangeModePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		setEngGoalBodyTypeChangeModePropEnum = append(setEngGoalBodyTypeChangeModePropEnum, v)
	}
}

// prop value enum
func (o *SetEngGoalBody) validateChangeModeEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, setEngGoalBodyTypeChangeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *SetEngGoalBody) validateChangeMode(formats strfmt.Registry) error {
	if swag.IsZero(o.ChangeMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateChangeModeEnum("request"+"."+"changeMode", "body", o.ChangeMode); err != nil {
		return err
	}

	return nil
}

func (o *SetEngGoalBody) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("request"+"."+"deviceId", "body", int64(o.DeviceID)); err != nil {
		return err
	}

	return nil
}

func (o *SetEngGoalBody) validateObjID(formats strfmt.Registry) error {

	if err := validate.Required("request"+"."+"objId", "body", int64(o.ObjID)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this set eng goal body based on context it is used
func (o *SetEngGoalBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SetEngGoalBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetEngGoalBody) UnmarshalBinary(b []byte) error {
	var res SetEngGoalBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

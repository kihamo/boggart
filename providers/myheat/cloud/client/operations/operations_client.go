// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetDeviceInfo(params *GetDeviceInfoParams, opts ...ClientOption) (*GetDeviceInfoOK, error)

	GetDevices(params *GetDevicesParams, opts ...ClientOption) (*GetDevicesOK, error)

	SetEngGoal(params *SetEngGoalParams, opts ...ClientOption) (*SetEngGoalOK, error)

	SetEnvCurve(params *SetEnvCurveParams, opts ...ClientOption) (*SetEnvCurveOK, error)

	SetEnvGoal(params *SetEnvGoalParams, opts ...ClientOption) (*SetEnvGoalOK, error)

	SetHeatingMode(params *SetHeatingModeParams, opts ...ClientOption) (*SetHeatingModeOK, error)

	SetSecurityMode(params *SetSecurityModeParams, opts ...ClientOption) (*SetSecurityModeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetDeviceInfo запросs состояния контроллера и его объектов
*/
func (a *Client) GetDeviceInfo(params *GetDeviceInfoParams, opts ...ClientOption) (*GetDeviceInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceInfo",
		Method:             "POST",
		PathPattern:        "/request/?getDeviceInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDeviceInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDevices запросs списка контроллеров подключенных к вашему аккаунту
*/
func (a *Client) GetDevices(params *GetDevicesParams, opts ...ClientOption) (*GetDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevices",
		Method:             "POST",
		PathPattern:        "/request/?getDevices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDevicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetEngGoal установкаs режима работы инженерного оборудования
*/
func (a *Client) SetEngGoal(params *SetEngGoalParams, opts ...ClientOption) (*SetEngGoalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEngGoalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setEngGoal",
		Method:             "POST",
		PathPattern:        "/request/?setEngGoal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetEngGoalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEngGoalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetEngGoalDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetEnvCurve установкаs погодозависимой кривой пза для среды контуры смесительный узел
*/
func (a *Client) SetEnvCurve(params *SetEnvCurveParams, opts ...ClientOption) (*SetEnvCurveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEnvCurveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setEnvCurve",
		Method:             "POST",
		PathPattern:        "/request/?setEnvCurve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetEnvCurveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEnvCurveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetEnvCurveDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetEnvGoal установкаs целевого значения для среды помещение контур и т д
*/
func (a *Client) SetEnvGoal(params *SetEnvGoalParams, opts ...ClientOption) (*SetEnvGoalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEnvGoalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setEnvGoal",
		Method:             "POST",
		PathPattern:        "/request/?setEnvGoal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetEnvGoalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEnvGoalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetEnvGoalDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetHeatingMode установкаs режима отопления или расписания
*/
func (a *Client) SetHeatingMode(params *SetHeatingModeParams, opts ...ClientOption) (*SetHeatingModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetHeatingModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setHeatingMode",
		Method:             "POST",
		PathPattern:        "/request/?setHeatingMode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetHeatingModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetHeatingModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetHeatingModeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetSecurityMode снятиеs с охраны постановка на охрану
*/
func (a *Client) SetSecurityMode(params *SetSecurityModeParams, opts ...ClientOption) (*SetSecurityModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetSecurityModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setSecurityMode",
		Method:             "POST",
		PathPattern:        "/request/?setSecurityMode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetSecurityModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetSecurityModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetSecurityModeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	extend "github.com/kihamo/boggart/protocols/swagger"
)

// ResponseDeviceInfo response device info
//
// swagger:model ResponseDeviceInfo
type ResponseDeviceInfo struct {

	// Инженерное оборудование (насосы, клапаны, печи и т.д.)
	EngineeringEquipment []*ResponseDeviceInfoEngsItems0 `json:"engs"`

	// Среды (помещения, контуры отопления, смесительные контуры, бойлеры, контуры ГВС и т.д.)
	Environments []*ResponseDeviceInfoEnvsItems0 `json:"envs"`

	// Сигналы тревоги (протечки воды, пожарные, охранные, учетка газа и т.д.)
	Alarms []interface{} `json:"alarms"`

	// Название населенного пункта
	City string `json:"city,omitempty"`

	// true, если данные от контроллера актуальны (т.е. обновлены не позднее, чем 20 минут назад)
	DataActual bool `json:"dataActual,omitempty"`

	// Котлы
	Heaters []*ResponseDeviceInfoHeatersItems0 `json:"heaters"`

	// Общий статус системы (включая статусы всех объектов)
	// Enum: [0 1 32 64]
	Severity int64 `json:"severity,omitempty"`

	// Текстовое описание статуса
	SeverityDesc string `json:"severityDesc,omitempty"`

	// Уличная температура
	WeatherTemp extend.FloatAsString `json:"weatherTemp,omitempty"`
}

// Validate validates this response device info
func (m *ResponseDeviceInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEngineeringEquipment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeatherTemp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseDeviceInfo) validateEngineeringEquipment(formats strfmt.Registry) error {
	if swag.IsZero(m.EngineeringEquipment) { // not required
		return nil
	}

	for i := 0; i < len(m.EngineeringEquipment); i++ {
		if swag.IsZero(m.EngineeringEquipment[i]) { // not required
			continue
		}

		if m.EngineeringEquipment[i] != nil {
			if err := m.EngineeringEquipment[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("engs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("engs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResponseDeviceInfo) validateEnvironments(formats strfmt.Registry) error {
	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	for i := 0; i < len(m.Environments); i++ {
		if swag.IsZero(m.Environments[i]) { // not required
			continue
		}

		if m.Environments[i] != nil {
			if err := m.Environments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("envs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("envs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResponseDeviceInfo) validateHeaters(formats strfmt.Registry) error {
	if swag.IsZero(m.Heaters) { // not required
		return nil
	}

	for i := 0; i < len(m.Heaters); i++ {
		if swag.IsZero(m.Heaters[i]) { // not required
			continue
		}

		if m.Heaters[i] != nil {
			if err := m.Heaters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("heaters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("heaters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var responseDeviceInfoTypeSeverityPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,32,64]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responseDeviceInfoTypeSeverityPropEnum = append(responseDeviceInfoTypeSeverityPropEnum, v)
	}
}

// prop value enum
func (m *ResponseDeviceInfo) validateSeverityEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, responseDeviceInfoTypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResponseDeviceInfo) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *ResponseDeviceInfo) validateWeatherTemp(formats strfmt.Registry) error {
	if swag.IsZero(m.WeatherTemp) { // not required
		return nil
	}

	if err := m.WeatherTemp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("weatherTemp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("weatherTemp")
		}
		return err
	}

	return nil
}

// ContextValidate validate this response device info based on the context it is used
func (m *ResponseDeviceInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEngineeringEquipment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnvironments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeaters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeatherTemp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseDeviceInfo) contextValidateEngineeringEquipment(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EngineeringEquipment); i++ {

		if m.EngineeringEquipment[i] != nil {

			if swag.IsZero(m.EngineeringEquipment[i]) { // not required
				return nil
			}

			if err := m.EngineeringEquipment[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("engs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("engs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResponseDeviceInfo) contextValidateEnvironments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Environments); i++ {

		if m.Environments[i] != nil {

			if swag.IsZero(m.Environments[i]) { // not required
				return nil
			}

			if err := m.Environments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("envs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("envs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResponseDeviceInfo) contextValidateHeaters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Heaters); i++ {

		if m.Heaters[i] != nil {

			if swag.IsZero(m.Heaters[i]) { // not required
				return nil
			}

			if err := m.Heaters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("heaters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("heaters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResponseDeviceInfo) contextValidateWeatherTemp(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.WeatherTemp) { // not required
		return nil
	}

	if err := m.WeatherTemp.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("weatherTemp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("weatherTemp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResponseDeviceInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseDeviceInfo) UnmarshalBinary(b []byte) error {
	var res ResponseDeviceInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResponseDeviceInfoEngsItems0 response device info engs items0
//
// swagger:model ResponseDeviceInfoEngsItems0
type ResponseDeviceInfoEngsItems0 struct {

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Общий статус объекта
	Severity int64 `json:"severity,omitempty"`

	// Текстовое описание статуса
	SeverityDesc string `json:"severityDesc,omitempty"`

	// Признак того, что оборудование включено (открыто в случае клапана)
	TurnedOn bool `json:"turnedOn,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this response device info engs items0
func (m *ResponseDeviceInfoEngsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this response device info engs items0 based on context it is used
func (m *ResponseDeviceInfoEngsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResponseDeviceInfoEngsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseDeviceInfoEngsItems0) UnmarshalBinary(b []byte) error {
	var res ResponseDeviceInfoEngsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResponseDeviceInfoEnvsItems0 response device info envs items0
//
// swagger:model ResponseDeviceInfoEnvsItems0
type ResponseDeviceInfoEnvsItems0 struct {

	// Признак того, что среда требует нагрева, т.е. дает запрос отопления котлу
	Demand bool `json:"demand,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Общий статус объекта
	Severity int64 `json:"severity,omitempty"`

	// Текстовое описание статуса
	SeverityDesc string `json:"severityDesc,omitempty"`

	// Текущее целевое значение
	Target int64 `json:"target,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// Текущее значение (температура)
	Value float64 `json:"value,omitempty"`
}

// Validate validates this response device info envs items0
func (m *ResponseDeviceInfoEnvsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this response device info envs items0 based on context it is used
func (m *ResponseDeviceInfoEnvsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResponseDeviceInfoEnvsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseDeviceInfoEnvsItems0) UnmarshalBinary(b []byte) error {
	var res ResponseDeviceInfoEnvsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResponseDeviceInfoHeatersItems0 response device info heaters items0
//
// swagger:model ResponseDeviceInfoHeatersItems0
type ResponseDeviceInfoHeatersItems0 struct {

	// Признак того, что горелка активна – котел греет ГВС
	BurnerHeating bool `json:"burnerHeating,omitempty"`

	// Признак того, что горелка активна – котел греет систему отопления
	BurnerWater bool `json:"burnerWater,omitempty"`

	// Признак того, что котел отключен в системе MY HEAT
	Disabled bool `json:"disabled,omitempty"`

	// Температура подачи котла
	FlowTemp float64 `json:"flowTemp,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// Модуляция горелки котла в % (степень открытия газового клапана)
	Modulation int64 `json:"modulation,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Давление
	Pressure float64 `json:"pressure,omitempty"`

	// Температура обратки котла
	ReturnTemp float64 `json:"returnTemp,omitempty"`

	// Текущее целевое значение в контуре отопления (когда котел не горит, либо не запроса отопления от сред, может быть равно 0)
	TargetTemp float64 `json:"targetTemp,omitempty"`
}

// Validate validates this response device info heaters items0
func (m *ResponseDeviceInfoHeatersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this response device info heaters items0 based on context it is used
func (m *ResponseDeviceInfoHeatersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResponseDeviceInfoHeatersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseDeviceInfoHeatersItems0) UnmarshalBinary(b []byte) error {
	var res ResponseDeviceInfoHeatersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/kihamo/boggart/providers/octoprint/models"
)

// GetCommandsReader is a Reader for the GetCommands structure.
type GetCommandsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCommandsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCommandsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetCommandsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/system/commands] getCommands", response, response.Code())
	}
}

// NewGetCommandsOK creates a GetCommandsOK with default headers values
func NewGetCommandsOK() *GetCommandsOK {
	return &GetCommandsOK{}
}

/*
GetCommandsOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetCommandsOK struct {
	Payload *GetCommandsOKBody
}

// IsSuccess returns true when this get commands o k response has a 2xx status code
func (o *GetCommandsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get commands o k response has a 3xx status code
func (o *GetCommandsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get commands o k response has a 4xx status code
func (o *GetCommandsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get commands o k response has a 5xx status code
func (o *GetCommandsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get commands o k response a status code equal to that given
func (o *GetCommandsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get commands o k response
func (o *GetCommandsOK) Code() int {
	return 200
}

func (o *GetCommandsOK) Error() string {
	return fmt.Sprintf("[GET /api/system/commands][%d] getCommandsOK  %+v", 200, o.Payload)
}

func (o *GetCommandsOK) String() string {
	return fmt.Sprintf("[GET /api/system/commands][%d] getCommandsOK  %+v", 200, o.Payload)
}

func (o *GetCommandsOK) GetPayload() *GetCommandsOKBody {
	return o.Payload
}

func (o *GetCommandsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetCommandsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCommandsNotFound creates a GetCommandsNotFound with default headers values
func NewGetCommandsNotFound() *GetCommandsNotFound {
	return &GetCommandsNotFound{}
}

/*
GetCommandsNotFound describes a response with status code 404, with default header values.

If a source other than core or custom is specified
*/
type GetCommandsNotFound struct {
}

// IsSuccess returns true when this get commands not found response has a 2xx status code
func (o *GetCommandsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get commands not found response has a 3xx status code
func (o *GetCommandsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get commands not found response has a 4xx status code
func (o *GetCommandsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get commands not found response has a 5xx status code
func (o *GetCommandsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get commands not found response a status code equal to that given
func (o *GetCommandsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get commands not found response
func (o *GetCommandsNotFound) Code() int {
	return 404
}

func (o *GetCommandsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/system/commands][%d] getCommandsNotFound ", 404)
}

func (o *GetCommandsNotFound) String() string {
	return fmt.Sprintf("[GET /api/system/commands][%d] getCommandsNotFound ", 404)
}

func (o *GetCommandsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetCommandsOKBody get commands o k body
swagger:model GetCommandsOKBody
*/
type GetCommandsOKBody struct {

	// core
	Core []*models.Command `json:"core"`

	// custom
	Custom []*models.Command `json:"custom"`
}

// Validate validates this get commands o k body
func (o *GetCommandsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCore(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustom(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCommandsOKBody) validateCore(formats strfmt.Registry) error {
	if swag.IsZero(o.Core) { // not required
		return nil
	}

	for i := 0; i < len(o.Core); i++ {
		if swag.IsZero(o.Core[i]) { // not required
			continue
		}

		if o.Core[i] != nil {
			if err := o.Core[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCommandsOK" + "." + "core" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCommandsOK" + "." + "core" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetCommandsOKBody) validateCustom(formats strfmt.Registry) error {
	if swag.IsZero(o.Custom) { // not required
		return nil
	}

	for i := 0; i < len(o.Custom); i++ {
		if swag.IsZero(o.Custom[i]) { // not required
			continue
		}

		if o.Custom[i] != nil {
			if err := o.Custom[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCommandsOK" + "." + "custom" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCommandsOK" + "." + "custom" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get commands o k body based on the context it is used
func (o *GetCommandsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCustom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCommandsOKBody) contextValidateCore(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Core); i++ {

		if o.Core[i] != nil {

			if swag.IsZero(o.Core[i]) { // not required
				return nil
			}

			if err := o.Core[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCommandsOK" + "." + "core" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCommandsOK" + "." + "core" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetCommandsOKBody) contextValidateCustom(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Custom); i++ {

		if o.Custom[i] != nil {

			if swag.IsZero(o.Custom[i]) { // not required
				return nil
			}

			if err := o.Custom[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCommandsOK" + "." + "custom" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCommandsOK" + "." + "custom" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCommandsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCommandsOKBody) UnmarshalBinary(b []byte) error {
	var res GetCommandsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package printer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetToolStateParams creates a new GetToolStateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetToolStateParams() *GetToolStateParams {
	return &GetToolStateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetToolStateParamsWithTimeout creates a new GetToolStateParams object
// with the ability to set a timeout on a request.
func NewGetToolStateParamsWithTimeout(timeout time.Duration) *GetToolStateParams {
	return &GetToolStateParams{
		timeout: timeout,
	}
}

// NewGetToolStateParamsWithContext creates a new GetToolStateParams object
// with the ability to set a context for a request.
func NewGetToolStateParamsWithContext(ctx context.Context) *GetToolStateParams {
	return &GetToolStateParams{
		Context: ctx,
	}
}

// NewGetToolStateParamsWithHTTPClient creates a new GetToolStateParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetToolStateParamsWithHTTPClient(client *http.Client) *GetToolStateParams {
	return &GetToolStateParams{
		HTTPClient: client,
	}
}

/*
GetToolStateParams contains all the parameters to send to the API endpoint

	for the get tool state operation.

	Typically these are written to a http.Request.
*/
type GetToolStateParams struct {

	/* History.

	   The printerâ€™s temperature history by supplying
	*/
	History *bool

	/* Limit.

	   The amount of data points limited
	*/
	Limit *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get tool state params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetToolStateParams) WithDefaults() *GetToolStateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get tool state params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetToolStateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get tool state params
func (o *GetToolStateParams) WithTimeout(timeout time.Duration) *GetToolStateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get tool state params
func (o *GetToolStateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get tool state params
func (o *GetToolStateParams) WithContext(ctx context.Context) *GetToolStateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get tool state params
func (o *GetToolStateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get tool state params
func (o *GetToolStateParams) WithHTTPClient(client *http.Client) *GetToolStateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get tool state params
func (o *GetToolStateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHistory adds the history to the get tool state params
func (o *GetToolStateParams) WithHistory(history *bool) *GetToolStateParams {
	o.SetHistory(history)
	return o
}

// SetHistory adds the history to the get tool state params
func (o *GetToolStateParams) SetHistory(history *bool) {
	o.History = history
}

// WithLimit adds the limit to the get tool state params
func (o *GetToolStateParams) WithLimit(limit *int64) *GetToolStateParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get tool state params
func (o *GetToolStateParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WriteToRequest writes these params to a swagger request
func (o *GetToolStateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.History != nil {

		// query param history
		var qrHistory bool

		if o.History != nil {
			qrHistory = *o.History
		}
		qHistory := swag.FormatBool(qrHistory)
		if qHistory != "" {

			if err := r.SetQueryParam("history", qHistory); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

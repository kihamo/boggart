// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PluginDisplayLayerProgress plugin display layer progress
//
// swagger:model PluginDisplayLayerProgress
type PluginDisplayLayerProgress struct {

	// fan speed
	FanSpeed string `json:"fanSpeed,omitempty"`

	// feedrate
	Feedrate string `json:"feedrate,omitempty"`

	// feedrate g0
	FeedrateG0 string `json:"feedrateG0,omitempty"`

	// feedrate g1
	FeedrateG1 string `json:"feedrateG1,omitempty"`

	// height
	Height *PluginDisplayLayerProgressHeight `json:"height,omitempty"`

	// layer
	Layer *PluginDisplayLayerProgressLayer `json:"layer,omitempty"`

	// print
	Print *PluginDisplayLayerProgressPrint `json:"print,omitempty"`
}

// Validate validates this plugin display layer progress
func (m *PluginDisplayLayerProgress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PluginDisplayLayerProgress) validateHeight(formats strfmt.Registry) error {
	if swag.IsZero(m.Height) { // not required
		return nil
	}

	if m.Height != nil {
		if err := m.Height.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("height")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("height")
			}
			return err
		}
	}

	return nil
}

func (m *PluginDisplayLayerProgress) validateLayer(formats strfmt.Registry) error {
	if swag.IsZero(m.Layer) { // not required
		return nil
	}

	if m.Layer != nil {
		if err := m.Layer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("layer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("layer")
			}
			return err
		}
	}

	return nil
}

func (m *PluginDisplayLayerProgress) validatePrint(formats strfmt.Registry) error {
	if swag.IsZero(m.Print) { // not required
		return nil
	}

	if m.Print != nil {
		if err := m.Print.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("print")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("print")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this plugin display layer progress based on the context it is used
func (m *PluginDisplayLayerProgress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLayer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PluginDisplayLayerProgress) contextValidateHeight(ctx context.Context, formats strfmt.Registry) error {

	if m.Height != nil {

		if swag.IsZero(m.Height) { // not required
			return nil
		}

		if err := m.Height.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("height")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("height")
			}
			return err
		}
	}

	return nil
}

func (m *PluginDisplayLayerProgress) contextValidateLayer(ctx context.Context, formats strfmt.Registry) error {

	if m.Layer != nil {

		if swag.IsZero(m.Layer) { // not required
			return nil
		}

		if err := m.Layer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("layer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("layer")
			}
			return err
		}
	}

	return nil
}

func (m *PluginDisplayLayerProgress) contextValidatePrint(ctx context.Context, formats strfmt.Registry) error {

	if m.Print != nil {

		if swag.IsZero(m.Print) { // not required
			return nil
		}

		if err := m.Print.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("print")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("print")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PluginDisplayLayerProgress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PluginDisplayLayerProgress) UnmarshalBinary(b []byte) error {
	var res PluginDisplayLayerProgress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PluginDisplayLayerProgressHeight plugin display layer progress height
//
// swagger:model PluginDisplayLayerProgressHeight
type PluginDisplayLayerProgressHeight struct {

	// current
	Current string `json:"current,omitempty"`

	// total
	Total string `json:"total,omitempty"`

	// total with extrusion
	TotalWithExtrusion string `json:"totalWithExtrusion,omitempty"`
}

// Validate validates this plugin display layer progress height
func (m *PluginDisplayLayerProgressHeight) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this plugin display layer progress height based on context it is used
func (m *PluginDisplayLayerProgressHeight) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PluginDisplayLayerProgressHeight) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PluginDisplayLayerProgressHeight) UnmarshalBinary(b []byte) error {
	var res PluginDisplayLayerProgressHeight
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PluginDisplayLayerProgressLayer plugin display layer progress layer
//
// swagger:model PluginDisplayLayerProgressLayer
type PluginDisplayLayerProgressLayer struct {

	// current
	Current string `json:"current,omitempty"`

	// total
	Total string `json:"total,omitempty"`
}

// Validate validates this plugin display layer progress layer
func (m *PluginDisplayLayerProgressLayer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this plugin display layer progress layer based on context it is used
func (m *PluginDisplayLayerProgressLayer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PluginDisplayLayerProgressLayer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PluginDisplayLayerProgressLayer) UnmarshalBinary(b []byte) error {
	var res PluginDisplayLayerProgressLayer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PluginDisplayLayerProgressPrint plugin display layer progress print
//
// swagger:model PluginDisplayLayerProgressPrint
type PluginDisplayLayerProgressPrint struct {

	// progress
	Progress string `json:"progress,omitempty"`

	// time left
	TimeLeft string `json:"timeLeft,omitempty"`

	// time left in seconds
	TimeLeftInSeconds int64 `json:"timeLeftInSeconds,omitempty"`
}

// Validate validates this plugin display layer progress print
func (m *PluginDisplayLayerProgressPrint) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this plugin display layer progress print based on context it is used
func (m *PluginDisplayLayerProgressPrint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PluginDisplayLayerProgressPrint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PluginDisplayLayerProgressPrint) UnmarshalBinary(b []byte) error {
	var res PluginDisplayLayerProgressPrint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

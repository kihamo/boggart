// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Connection connection
//
// swagger:model Connection
type Connection struct {

	// current
	Current *ConnectionCurrent `json:"current,omitempty"`

	// options
	Options *ConnectionOptions `json:"options,omitempty"`
}

// Validate validates this connection
func (m *Connection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Connection) validateCurrent(formats strfmt.Registry) error {
	if swag.IsZero(m.Current) { // not required
		return nil
	}

	if m.Current != nil {
		if err := m.Current.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("current")
			}
			return err
		}
	}

	return nil
}

func (m *Connection) validateOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this connection based on the context it is used
func (m *Connection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurrent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Connection) contextValidateCurrent(ctx context.Context, formats strfmt.Registry) error {

	if m.Current != nil {

		if swag.IsZero(m.Current) { // not required
			return nil
		}

		if err := m.Current.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("current")
			}
			return err
		}
	}

	return nil
}

func (m *Connection) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.Options != nil {

		if swag.IsZero(m.Options) { // not required
			return nil
		}

		if err := m.Options.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Connection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Connection) UnmarshalBinary(b []byte) error {
	var res Connection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ConnectionCurrent connection current
//
// swagger:model ConnectionCurrent
type ConnectionCurrent struct {

	// baudrate
	Baudrate int64 `json:"baudrate,omitempty"`

	// port
	Port string `json:"port,omitempty"`

	// printer profile
	PrinterProfile string `json:"printerProfile,omitempty"`

	// state
	State string `json:"state,omitempty"`
}

// Validate validates this connection current
func (m *ConnectionCurrent) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this connection current based on context it is used
func (m *ConnectionCurrent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConnectionCurrent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectionCurrent) UnmarshalBinary(b []byte) error {
	var res ConnectionCurrent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ConnectionOptions connection options
//
// swagger:model ConnectionOptions
type ConnectionOptions struct {

	// autoconnect
	Autoconnect bool `json:"autoconnect,omitempty"`

	// baudrate preference
	BaudratePreference int64 `json:"baudratePreference,omitempty"`

	// baudrates
	Baudrates []int64 `json:"baudrates"`

	// port preference
	PortPreference string `json:"portPreference,omitempty"`

	// ports
	Ports []string `json:"ports"`

	// printer profile preference
	PrinterProfilePreference string `json:"printerProfilePreference,omitempty"`

	// printer profiles
	PrinterProfiles []*ConnectionOptionsPrinterProfilesItems0 `json:"printerProfiles"`
}

// Validate validates this connection options
func (m *ConnectionOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrinterProfiles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectionOptions) validatePrinterProfiles(formats strfmt.Registry) error {
	if swag.IsZero(m.PrinterProfiles) { // not required
		return nil
	}

	for i := 0; i < len(m.PrinterProfiles); i++ {
		if swag.IsZero(m.PrinterProfiles[i]) { // not required
			continue
		}

		if m.PrinterProfiles[i] != nil {
			if err := m.PrinterProfiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + "printerProfiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("options" + "." + "printerProfiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this connection options based on the context it is used
func (m *ConnectionOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePrinterProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectionOptions) contextValidatePrinterProfiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PrinterProfiles); i++ {

		if m.PrinterProfiles[i] != nil {

			if swag.IsZero(m.PrinterProfiles[i]) { // not required
				return nil
			}

			if err := m.PrinterProfiles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + "printerProfiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("options" + "." + "printerProfiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConnectionOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectionOptions) UnmarshalBinary(b []byte) error {
	var res ConnectionOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ConnectionOptionsPrinterProfilesItems0 connection options printer profiles items0
//
// swagger:model ConnectionOptionsPrinterProfilesItems0
type ConnectionOptionsPrinterProfilesItems0 struct {

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this connection options printer profiles items0
func (m *ConnectionOptionsPrinterProfilesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this connection options printer profiles items0 based on context it is used
func (m *ConnectionOptionsPrinterProfilesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConnectionOptionsPrinterProfilesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectionOptionsPrinterProfilesItems0) UnmarshalBinary(b []byte) error {
	var res ConnectionOptionsPrinterProfilesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

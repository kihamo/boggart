// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PrinterState printer state
//
// swagger:model PrinterState
type PrinterState struct {

	// sd
	Sd *SDState `json:"sd,omitempty"`

	// state
	State *PrinterStateState `json:"state,omitempty"`

	// temperature
	Temperature map[string]TemperatureData `json:"temperature,omitempty"`
}

// Validate validates this printer state
func (m *PrinterState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemperature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrinterState) validateSd(formats strfmt.Registry) error {
	if swag.IsZero(m.Sd) { // not required
		return nil
	}

	if m.Sd != nil {
		if err := m.Sd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sd")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sd")
			}
			return err
		}
	}

	return nil
}

func (m *PrinterState) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *PrinterState) validateTemperature(formats strfmt.Registry) error {
	if swag.IsZero(m.Temperature) { // not required
		return nil
	}

	for k := range m.Temperature {

		if err := validate.Required("temperature"+"."+k, "body", m.Temperature[k]); err != nil {
			return err
		}
		if val, ok := m.Temperature[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("temperature" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("temperature" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this printer state based on the context it is used
func (m *PrinterState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemperature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrinterState) contextValidateSd(ctx context.Context, formats strfmt.Registry) error {

	if m.Sd != nil {

		if swag.IsZero(m.Sd) { // not required
			return nil
		}

		if err := m.Sd.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sd")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sd")
			}
			return err
		}
	}

	return nil
}

func (m *PrinterState) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {

		if swag.IsZero(m.State) { // not required
			return nil
		}

		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *PrinterState) contextValidateTemperature(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Temperature {

		if val, ok := m.Temperature[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrinterState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrinterState) UnmarshalBinary(b []byte) error {
	var res PrinterState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PrinterStateState printer state state
//
// swagger:model PrinterStateState
type PrinterStateState struct {

	// flags
	Flags *PrinterStateStateFlags `json:"flags,omitempty"`

	// text
	Text string `json:"text,omitempty"`
}

// Validate validates this printer state state
func (m *PrinterStateState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrinterStateState) validateFlags(formats strfmt.Registry) error {
	if swag.IsZero(m.Flags) { // not required
		return nil
	}

	if m.Flags != nil {
		if err := m.Flags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state" + "." + "flags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state" + "." + "flags")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this printer state state based on the context it is used
func (m *PrinterStateState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFlags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrinterStateState) contextValidateFlags(ctx context.Context, formats strfmt.Registry) error {

	if m.Flags != nil {

		if swag.IsZero(m.Flags) { // not required
			return nil
		}

		if err := m.Flags.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state" + "." + "flags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state" + "." + "flags")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrinterStateState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrinterStateState) UnmarshalBinary(b []byte) error {
	var res PrinterStateState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PrinterStateStateFlags printer state state flags
//
// swagger:model PrinterStateStateFlags
type PrinterStateStateFlags struct {

	// cancelling
	Cancelling bool `json:"cancelling,omitempty"`

	// closed or error
	ClosedOrError bool `json:"closedOrError,omitempty"`

	// error
	Error bool `json:"error,omitempty"`

	// operational
	Operational bool `json:"operational,omitempty"`

	// paused
	Paused bool `json:"paused,omitempty"`

	// pausing
	Pausing bool `json:"pausing,omitempty"`

	// printing
	Printing bool `json:"printing,omitempty"`

	// ready
	Ready bool `json:"ready,omitempty"`

	// sd ready
	SdReady bool `json:"sdReady,omitempty"`
}

// Validate validates this printer state state flags
func (m *PrinterStateStateFlags) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this printer state state flags based on context it is used
func (m *PrinterStateStateFlags) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PrinterStateStateFlags) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrinterStateStateFlags) UnmarshalBinary(b []byte) error {
	var res PrinterStateStateFlags
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

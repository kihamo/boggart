// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Job job
//
// swagger:model Job
type Job struct {

	// job
	Job *JobJob `json:"job,omitempty"`

	// progress
	Progress *JobProgress `json:"progress,omitempty"`

	// state
	State string `json:"state,omitempty"`
}

// Validate validates this job
func (m *Job) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Job) validateJob(formats strfmt.Registry) error {
	if swag.IsZero(m.Job) { // not required
		return nil
	}

	if m.Job != nil {
		if err := m.Job.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job")
			}
			return err
		}
	}

	return nil
}

func (m *Job) validateProgress(formats strfmt.Registry) error {
	if swag.IsZero(m.Progress) { // not required
		return nil
	}

	if m.Progress != nil {
		if err := m.Progress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progress")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this job based on the context it is used
func (m *Job) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProgress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Job) contextValidateJob(ctx context.Context, formats strfmt.Registry) error {

	if m.Job != nil {

		if swag.IsZero(m.Job) { // not required
			return nil
		}

		if err := m.Job.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job")
			}
			return err
		}
	}

	return nil
}

func (m *Job) contextValidateProgress(ctx context.Context, formats strfmt.Registry) error {

	if m.Progress != nil {

		if swag.IsZero(m.Progress) { // not required
			return nil
		}

		if err := m.Progress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Job) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Job) UnmarshalBinary(b []byte) error {
	var res Job
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// JobJob job job
//
// swagger:model JobJob
type JobJob struct {

	// average print time
	AveragePrintTime float64 `json:"averagePrintTime,omitempty"`

	// estimated print time
	EstimatedPrintTime float64 `json:"estimatedPrintTime,omitempty"`

	// filament
	Filament *JobJobFilament `json:"filament,omitempty"`

	// file
	File *JobJobFile `json:"file,omitempty"`

	// last print time
	LastPrintTime float64 `json:"lastPrintTime,omitempty"`
}

// Validate validates this job job
func (m *JobJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilament(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobJob) validateFilament(formats strfmt.Registry) error {
	if swag.IsZero(m.Filament) { // not required
		return nil
	}

	if m.Filament != nil {
		if err := m.Filament.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job" + "." + "filament")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job" + "." + "filament")
			}
			return err
		}
	}

	return nil
}

func (m *JobJob) validateFile(formats strfmt.Registry) error {
	if swag.IsZero(m.File) { // not required
		return nil
	}

	if m.File != nil {
		if err := m.File.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job" + "." + "file")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job" + "." + "file")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this job job based on the context it is used
func (m *JobJob) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilament(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobJob) contextValidateFilament(ctx context.Context, formats strfmt.Registry) error {

	if m.Filament != nil {

		if swag.IsZero(m.Filament) { // not required
			return nil
		}

		if err := m.Filament.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job" + "." + "filament")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job" + "." + "filament")
			}
			return err
		}
	}

	return nil
}

func (m *JobJob) contextValidateFile(ctx context.Context, formats strfmt.Registry) error {

	if m.File != nil {

		if swag.IsZero(m.File) { // not required
			return nil
		}

		if err := m.File.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job" + "." + "file")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job" + "." + "file")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobJob) UnmarshalBinary(b []byte) error {
	var res JobJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// JobJobFilament job job filament
//
// swagger:model JobJobFilament
type JobJobFilament struct {

	// length
	Length int64 `json:"length,omitempty"`

	// volume
	Volume float64 `json:"volume,omitempty"`
}

// Validate validates this job job filament
func (m *JobJobFilament) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this job job filament based on context it is used
func (m *JobJobFilament) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *JobJobFilament) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobJobFilament) UnmarshalBinary(b []byte) error {
	var res JobJobFilament
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// JobJobFile job job file
//
// swagger:model JobJobFile
type JobJobFile struct {

	// date
	Date int64 `json:"date,omitempty"`

	// display
	Display string `json:"display,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// type path
	TypePath []string `json:"typePath"`
}

// Validate validates this job job file
func (m *JobJobFile) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this job job file based on context it is used
func (m *JobJobFile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *JobJobFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobJobFile) UnmarshalBinary(b []byte) error {
	var res JobJobFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// JobProgress job progress
//
// swagger:model JobProgress
type JobProgress struct {

	// completion
	Completion float64 `json:"completion,omitempty"`

	// filepos
	Filepos int64 `json:"filepos,omitempty"`

	// print time
	PrintTime int64 `json:"printTime,omitempty"`

	// print time left
	PrintTimeLeft int64 `json:"printTimeLeft,omitempty"`

	// print time left origin
	PrintTimeLeftOrigin string `json:"printTimeLeftOrigin,omitempty"`
}

// Validate validates this job progress
func (m *JobProgress) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this job progress based on context it is used
func (m *JobProgress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *JobProgress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobProgress) UnmarshalBinary(b []byte) error {
	var res JobProgress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

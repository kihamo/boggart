// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	static "github.com/kihamo/boggart/providers/openweathermap/static/models"
)

// ForecastListItem forecast list item
//
// swagger:model ForecastListItem
type ForecastListItem struct {

	// clouds
	Clouds *Clouds `json:"clouds,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// dt
	// Format: date-time
	Dt static.DateTime `json:"dt,omitempty"`

	// dt txt
	DtTxt string `json:"dt_txt,omitempty"`

	// main
	Main *Main `json:"main,omitempty"`

	// pop
	Pop float64 `json:"pop,omitempty"`

	// rain
	Rain *Rain `json:"rain,omitempty"`

	// snow
	Snow *Snow `json:"snow,omitempty"`

	// sunrise
	// Format: date-time
	Sunrise static.DateTime `json:"sunrise,omitempty"`

	// sunset
	// Format: date-time
	Sunset static.DateTime `json:"sunset,omitempty"`

	// sys
	Sys *ForecastListItemSys `json:"sys,omitempty"`

	// timezone
	Timezone uint64 `json:"timezone,omitempty"`

	// visibility
	Visibility uint64 `json:"visibility,omitempty"`

	// weather
	Weather []*Weather `json:"weather"`

	// wind
	Wind *Wind `json:"wind,omitempty"`
}

// Validate validates this forecast list item
func (m *ForecastListItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClouds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSunrise(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSunset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeather(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ForecastListItem) validateClouds(formats strfmt.Registry) error {
	if swag.IsZero(m.Clouds) { // not required
		return nil
	}

	if m.Clouds != nil {
		if err := m.Clouds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clouds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clouds")
			}
			return err
		}
	}

	return nil
}

func (m *ForecastListItem) validateDt(formats strfmt.Registry) error {
	if swag.IsZero(m.Dt) { // not required
		return nil
	}

	if err := m.Dt.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dt")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dt")
		}
		return err
	}

	return nil
}

func (m *ForecastListItem) validateMain(formats strfmt.Registry) error {
	if swag.IsZero(m.Main) { // not required
		return nil
	}

	if m.Main != nil {
		if err := m.Main.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("main")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("main")
			}
			return err
		}
	}

	return nil
}

func (m *ForecastListItem) validateRain(formats strfmt.Registry) error {
	if swag.IsZero(m.Rain) { // not required
		return nil
	}

	if m.Rain != nil {
		if err := m.Rain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rain")
			}
			return err
		}
	}

	return nil
}

func (m *ForecastListItem) validateSnow(formats strfmt.Registry) error {
	if swag.IsZero(m.Snow) { // not required
		return nil
	}

	if m.Snow != nil {
		if err := m.Snow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snow")
			}
			return err
		}
	}

	return nil
}

func (m *ForecastListItem) validateSunrise(formats strfmt.Registry) error {
	if swag.IsZero(m.Sunrise) { // not required
		return nil
	}

	if err := m.Sunrise.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sunrise")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sunrise")
		}
		return err
	}

	return nil
}

func (m *ForecastListItem) validateSunset(formats strfmt.Registry) error {
	if swag.IsZero(m.Sunset) { // not required
		return nil
	}

	if err := m.Sunset.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sunset")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sunset")
		}
		return err
	}

	return nil
}

func (m *ForecastListItem) validateSys(formats strfmt.Registry) error {
	if swag.IsZero(m.Sys) { // not required
		return nil
	}

	if m.Sys != nil {
		if err := m.Sys.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sys")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sys")
			}
			return err
		}
	}

	return nil
}

func (m *ForecastListItem) validateWeather(formats strfmt.Registry) error {
	if swag.IsZero(m.Weather) { // not required
		return nil
	}

	for i := 0; i < len(m.Weather); i++ {
		if swag.IsZero(m.Weather[i]) { // not required
			continue
		}

		if m.Weather[i] != nil {
			if err := m.Weather[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("weather" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("weather" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ForecastListItem) validateWind(formats strfmt.Registry) error {
	if swag.IsZero(m.Wind) { // not required
		return nil
	}

	if m.Wind != nil {
		if err := m.Wind.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wind")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wind")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this forecast list item based on the context it is used
func (m *ForecastListItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClouds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSunrise(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSunset(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeather(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ForecastListItem) contextValidateClouds(ctx context.Context, formats strfmt.Registry) error {

	if m.Clouds != nil {

		if swag.IsZero(m.Clouds) { // not required
			return nil
		}

		if err := m.Clouds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clouds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clouds")
			}
			return err
		}
	}

	return nil
}

func (m *ForecastListItem) contextValidateDt(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Dt) { // not required
		return nil
	}

	if err := m.Dt.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dt")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dt")
		}
		return err
	}

	return nil
}

func (m *ForecastListItem) contextValidateMain(ctx context.Context, formats strfmt.Registry) error {

	if m.Main != nil {

		if swag.IsZero(m.Main) { // not required
			return nil
		}

		if err := m.Main.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("main")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("main")
			}
			return err
		}
	}

	return nil
}

func (m *ForecastListItem) contextValidateRain(ctx context.Context, formats strfmt.Registry) error {

	if m.Rain != nil {

		if swag.IsZero(m.Rain) { // not required
			return nil
		}

		if err := m.Rain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rain")
			}
			return err
		}
	}

	return nil
}

func (m *ForecastListItem) contextValidateSnow(ctx context.Context, formats strfmt.Registry) error {

	if m.Snow != nil {

		if swag.IsZero(m.Snow) { // not required
			return nil
		}

		if err := m.Snow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snow")
			}
			return err
		}
	}

	return nil
}

func (m *ForecastListItem) contextValidateSunrise(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Sunrise) { // not required
		return nil
	}

	if err := m.Sunrise.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sunrise")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sunrise")
		}
		return err
	}

	return nil
}

func (m *ForecastListItem) contextValidateSunset(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Sunset) { // not required
		return nil
	}

	if err := m.Sunset.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sunset")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sunset")
		}
		return err
	}

	return nil
}

func (m *ForecastListItem) contextValidateSys(ctx context.Context, formats strfmt.Registry) error {

	if m.Sys != nil {

		if swag.IsZero(m.Sys) { // not required
			return nil
		}

		if err := m.Sys.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sys")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sys")
			}
			return err
		}
	}

	return nil
}

func (m *ForecastListItem) contextValidateWeather(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Weather); i++ {

		if m.Weather[i] != nil {

			if swag.IsZero(m.Weather[i]) { // not required
				return nil
			}

			if err := m.Weather[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("weather" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("weather" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ForecastListItem) contextValidateWind(ctx context.Context, formats strfmt.Registry) error {

	if m.Wind != nil {

		if swag.IsZero(m.Wind) { // not required
			return nil
		}

		if err := m.Wind.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wind")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wind")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ForecastListItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ForecastListItem) UnmarshalBinary(b []byte) error {
	var res ForecastListItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ForecastListItemSys forecast list item sys
//
// swagger:model ForecastListItemSys
type ForecastListItemSys struct {

	// pod
	// Enum: [d n]
	Pod string `json:"pod,omitempty"`
}

// Validate validates this forecast list item sys
func (m *ForecastListItemSys) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var forecastListItemSysTypePodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["d","n"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		forecastListItemSysTypePodPropEnum = append(forecastListItemSysTypePodPropEnum, v)
	}
}

const (

	// ForecastListItemSysPodD captures enum value "d"
	ForecastListItemSysPodD string = "d"

	// ForecastListItemSysPodN captures enum value "n"
	ForecastListItemSysPodN string = "n"
)

// prop value enum
func (m *ForecastListItemSys) validatePodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, forecastListItemSysTypePodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ForecastListItemSys) validatePod(formats strfmt.Registry) error {
	if swag.IsZero(m.Pod) { // not required
		return nil
	}

	// value enum
	if err := m.validatePodEnum("sys"+"."+"pod", "body", m.Pod); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this forecast list item sys based on context it is used
func (m *ForecastListItemSys) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ForecastListItemSys) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ForecastListItemSys) UnmarshalBinary(b []byte) error {
	var res ForecastListItemSys
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

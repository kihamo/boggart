// Code generated by go-swagger; DO NOT EDIT.

package weather

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetCurrentByCityNameParams creates a new GetCurrentByCityNameParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetCurrentByCityNameParams() *GetCurrentByCityNameParams {
	return &GetCurrentByCityNameParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetCurrentByCityNameParamsWithTimeout creates a new GetCurrentByCityNameParams object
// with the ability to set a timeout on a request.
func NewGetCurrentByCityNameParamsWithTimeout(timeout time.Duration) *GetCurrentByCityNameParams {
	return &GetCurrentByCityNameParams{
		timeout: timeout,
	}
}

// NewGetCurrentByCityNameParamsWithContext creates a new GetCurrentByCityNameParams object
// with the ability to set a context for a request.
func NewGetCurrentByCityNameParamsWithContext(ctx context.Context) *GetCurrentByCityNameParams {
	return &GetCurrentByCityNameParams{
		Context: ctx,
	}
}

// NewGetCurrentByCityNameParamsWithHTTPClient creates a new GetCurrentByCityNameParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetCurrentByCityNameParamsWithHTTPClient(client *http.Client) *GetCurrentByCityNameParams {
	return &GetCurrentByCityNameParams{
		HTTPClient: client,
	}
}

/*
GetCurrentByCityNameParams contains all the parameters to send to the API endpoint

	for the get current by city name operation.

	Typically these are written to a http.Request.
*/
type GetCurrentByCityNameParams struct {

	/* Lang.

	   Multilingual support
	*/
	Lang *string

	/* Q.

	   City name, state code and country code divided by comma, use ISO 3166 country code
	*/
	Q string

	/* Units.

	   Standard, metric, and imperial units are available
	*/
	Units *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get current by city name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCurrentByCityNameParams) WithDefaults() *GetCurrentByCityNameParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get current by city name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCurrentByCityNameParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get current by city name params
func (o *GetCurrentByCityNameParams) WithTimeout(timeout time.Duration) *GetCurrentByCityNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get current by city name params
func (o *GetCurrentByCityNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get current by city name params
func (o *GetCurrentByCityNameParams) WithContext(ctx context.Context) *GetCurrentByCityNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get current by city name params
func (o *GetCurrentByCityNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get current by city name params
func (o *GetCurrentByCityNameParams) WithHTTPClient(client *http.Client) *GetCurrentByCityNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get current by city name params
func (o *GetCurrentByCityNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLang adds the lang to the get current by city name params
func (o *GetCurrentByCityNameParams) WithLang(lang *string) *GetCurrentByCityNameParams {
	o.SetLang(lang)
	return o
}

// SetLang adds the lang to the get current by city name params
func (o *GetCurrentByCityNameParams) SetLang(lang *string) {
	o.Lang = lang
}

// WithQ adds the q to the get current by city name params
func (o *GetCurrentByCityNameParams) WithQ(q string) *GetCurrentByCityNameParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get current by city name params
func (o *GetCurrentByCityNameParams) SetQ(q string) {
	o.Q = q
}

// WithUnits adds the units to the get current by city name params
func (o *GetCurrentByCityNameParams) WithUnits(units *string) *GetCurrentByCityNameParams {
	o.SetUnits(units)
	return o
}

// SetUnits adds the units to the get current by city name params
func (o *GetCurrentByCityNameParams) SetUnits(units *string) {
	o.Units = units
}

// WriteToRequest writes these params to a swagger request
func (o *GetCurrentByCityNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Lang != nil {

		// query param lang
		var qrLang string

		if o.Lang != nil {
			qrLang = *o.Lang
		}
		qLang := qrLang
		if qLang != "" {

			if err := r.SetQueryParam("lang", qLang); err != nil {
				return err
			}
		}
	}

	// query param q
	qrQ := o.Q
	qQ := qrQ
	if qQ != "" {

		if err := r.SetQueryParam("q", qQ); err != nil {
			return err
		}
	}

	if o.Units != nil {

		// query param units
		var qrUnits string

		if o.Units != nil {
			qrUnits = *o.Units
		}
		qUnits := qrUnits
		if qUnits != "" {

			if err := r.SetQueryParam("units", qUnits); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

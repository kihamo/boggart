// Code generated by go-swagger; DO NOT EDIT.

package weather

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new weather API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for weather API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetCurrentByCityID(params *GetCurrentByCityIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentByCityIDOK, error)

	GetCurrentByCityName(params *GetCurrentByCityNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentByCityNameOK, error)

	GetCurrentByGeographicCoordinates(params *GetCurrentByGeographicCoordinatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentByGeographicCoordinatesOK, error)

	GetCurrentByZIPCode(params *GetCurrentByZIPCodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentByZIPCodeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetCurrentByCityID get current by city ID API
*/
func (a *Client) GetCurrentByCityID(params *GetCurrentByCityIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentByCityIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentByCityIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCurrentByCityID",
		Method:             "GET",
		PathPattern:        "/data/2.5/weather?id={id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCurrentByCityIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCurrentByCityIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCurrentByCityIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCurrentByCityName get current by city name API
*/
func (a *Client) GetCurrentByCityName(params *GetCurrentByCityNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentByCityNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentByCityNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCurrentByCityName",
		Method:             "GET",
		PathPattern:        "/data/2.5/weather?q={q}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCurrentByCityNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCurrentByCityNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCurrentByCityNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCurrentByGeographicCoordinates get current by geographic coordinates API
*/
func (a *Client) GetCurrentByGeographicCoordinates(params *GetCurrentByGeographicCoordinatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentByGeographicCoordinatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentByGeographicCoordinatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCurrentByGeographicCoordinates",
		Method:             "GET",
		PathPattern:        "/data/2.5/weather?lat={lat}&lon={lon}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCurrentByGeographicCoordinatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCurrentByGeographicCoordinatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCurrentByGeographicCoordinatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCurrentByZIPCode get current by z IP code API
*/
func (a *Client) GetCurrentByZIPCode(params *GetCurrentByZIPCodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentByZIPCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentByZIPCodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCurrentByZIPCode",
		Method:             "GET",
		PathPattern:        "/data/2.5/weather?zip={zip}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCurrentByZIPCodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCurrentByZIPCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCurrentByZIPCodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package forecast

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetForecastByCityIDParams creates a new GetForecastByCityIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetForecastByCityIDParams() *GetForecastByCityIDParams {
	return &GetForecastByCityIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetForecastByCityIDParamsWithTimeout creates a new GetForecastByCityIDParams object
// with the ability to set a timeout on a request.
func NewGetForecastByCityIDParamsWithTimeout(timeout time.Duration) *GetForecastByCityIDParams {
	return &GetForecastByCityIDParams{
		timeout: timeout,
	}
}

// NewGetForecastByCityIDParamsWithContext creates a new GetForecastByCityIDParams object
// with the ability to set a context for a request.
func NewGetForecastByCityIDParamsWithContext(ctx context.Context) *GetForecastByCityIDParams {
	return &GetForecastByCityIDParams{
		Context: ctx,
	}
}

// NewGetForecastByCityIDParamsWithHTTPClient creates a new GetForecastByCityIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetForecastByCityIDParamsWithHTTPClient(client *http.Client) *GetForecastByCityIDParams {
	return &GetForecastByCityIDParams{
		HTTPClient: client,
	}
}

/*
GetForecastByCityIDParams contains all the parameters to send to the API endpoint

	for the get forecast by city ID operation.

	Typically these are written to a http.Request.
*/
type GetForecastByCityIDParams struct {

	/* Cnt.

	   To limit number of listed cities please setup 'cnt' parameter that specifies the number of lines returned

	   Format: uint64
	*/
	Cnt *uint64

	/* ID.

	   City ID

	   Format: uint64
	*/
	ID uint64

	/* Lang.

	   Multilingual support
	*/
	Lang *string

	/* Units.

	   Standard, metric, and imperial units are available
	*/
	Units *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get forecast by city ID params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetForecastByCityIDParams) WithDefaults() *GetForecastByCityIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get forecast by city ID params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetForecastByCityIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get forecast by city ID params
func (o *GetForecastByCityIDParams) WithTimeout(timeout time.Duration) *GetForecastByCityIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get forecast by city ID params
func (o *GetForecastByCityIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get forecast by city ID params
func (o *GetForecastByCityIDParams) WithContext(ctx context.Context) *GetForecastByCityIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get forecast by city ID params
func (o *GetForecastByCityIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get forecast by city ID params
func (o *GetForecastByCityIDParams) WithHTTPClient(client *http.Client) *GetForecastByCityIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get forecast by city ID params
func (o *GetForecastByCityIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCnt adds the cnt to the get forecast by city ID params
func (o *GetForecastByCityIDParams) WithCnt(cnt *uint64) *GetForecastByCityIDParams {
	o.SetCnt(cnt)
	return o
}

// SetCnt adds the cnt to the get forecast by city ID params
func (o *GetForecastByCityIDParams) SetCnt(cnt *uint64) {
	o.Cnt = cnt
}

// WithID adds the id to the get forecast by city ID params
func (o *GetForecastByCityIDParams) WithID(id uint64) *GetForecastByCityIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get forecast by city ID params
func (o *GetForecastByCityIDParams) SetID(id uint64) {
	o.ID = id
}

// WithLang adds the lang to the get forecast by city ID params
func (o *GetForecastByCityIDParams) WithLang(lang *string) *GetForecastByCityIDParams {
	o.SetLang(lang)
	return o
}

// SetLang adds the lang to the get forecast by city ID params
func (o *GetForecastByCityIDParams) SetLang(lang *string) {
	o.Lang = lang
}

// WithUnits adds the units to the get forecast by city ID params
func (o *GetForecastByCityIDParams) WithUnits(units *string) *GetForecastByCityIDParams {
	o.SetUnits(units)
	return o
}

// SetUnits adds the units to the get forecast by city ID params
func (o *GetForecastByCityIDParams) SetUnits(units *string) {
	o.Units = units
}

// WriteToRequest writes these params to a swagger request
func (o *GetForecastByCityIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cnt != nil {

		// query param cnt
		var qrCnt uint64

		if o.Cnt != nil {
			qrCnt = *o.Cnt
		}
		qCnt := swag.FormatUint64(qrCnt)
		if qCnt != "" {

			if err := r.SetQueryParam("cnt", qCnt); err != nil {
				return err
			}
		}
	}

	// query param id
	qrID := o.ID
	qID := swag.FormatUint64(qrID)
	if qID != "" {

		if err := r.SetQueryParam("id", qID); err != nil {
			return err
		}
	}

	if o.Lang != nil {

		// query param lang
		var qrLang string

		if o.Lang != nil {
			qrLang = *o.Lang
		}
		qLang := qrLang
		if qLang != "" {

			if err := r.SetQueryParam("lang", qLang); err != nil {
				return err
			}
		}
	}

	if o.Units != nil {

		// query param units
		var qrUnits string

		if o.Units != nil {
			qrUnits = *o.Units
		}
		qUnits := qrUnits
		if qUnits != "" {

			if err := r.SetQueryParam("units", qUnits); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

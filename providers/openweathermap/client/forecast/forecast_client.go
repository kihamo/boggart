// Code generated by go-swagger; DO NOT EDIT.

package forecast

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new forecast API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for forecast API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetForecastByCityID(params *GetForecastByCityIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetForecastByCityIDOK, error)

	GetForecastByCityName(params *GetForecastByCityNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetForecastByCityNameOK, error)

	GetForecastByGeographicCoordinates(params *GetForecastByGeographicCoordinatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetForecastByGeographicCoordinatesOK, error)

	GetForecastByZIPCode(params *GetForecastByZIPCodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetForecastByZIPCodeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetForecastByCityID get forecast by city ID API
*/
func (a *Client) GetForecastByCityID(params *GetForecastByCityIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetForecastByCityIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetForecastByCityIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getForecastByCityID",
		Method:             "GET",
		PathPattern:        "/data/2.5/forecast?id={id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetForecastByCityIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetForecastByCityIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetForecastByCityIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetForecastByCityName get forecast by city name API
*/
func (a *Client) GetForecastByCityName(params *GetForecastByCityNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetForecastByCityNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetForecastByCityNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getForecastByCityName",
		Method:             "GET",
		PathPattern:        "/data/2.5/forecast?q={q}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetForecastByCityNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetForecastByCityNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetForecastByCityNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetForecastByGeographicCoordinates get forecast by geographic coordinates API
*/
func (a *Client) GetForecastByGeographicCoordinates(params *GetForecastByGeographicCoordinatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetForecastByGeographicCoordinatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetForecastByGeographicCoordinatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getForecastByGeographicCoordinates",
		Method:             "GET",
		PathPattern:        "/data/2.5/forecast?lat={lat}&lon={lon}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetForecastByGeographicCoordinatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetForecastByGeographicCoordinatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetForecastByGeographicCoordinatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetForecastByZIPCode get forecast by z IP code API
*/
func (a *Client) GetForecastByZIPCode(params *GetForecastByZIPCodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetForecastByZIPCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetForecastByZIPCodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getForecastByZIPCode",
		Method:             "GET",
		PathPattern:        "/data/2.5/forecast?zip={zip}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetForecastByZIPCodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetForecastByZIPCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetForecastByZIPCodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

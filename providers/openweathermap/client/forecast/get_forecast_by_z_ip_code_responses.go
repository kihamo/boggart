// Code generated by go-swagger; DO NOT EDIT.

package forecast

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kihamo/boggart/providers/openweathermap/models"
)

// GetForecastByZIPCodeReader is a Reader for the GetForecastByZIPCode structure.
type GetForecastByZIPCodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetForecastByZIPCodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetForecastByZIPCodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 429:
		result := NewGetForecastByZIPCodeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetForecastByZIPCodeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetForecastByZIPCodeOK creates a GetForecastByZIPCodeOK with default headers values
func NewGetForecastByZIPCodeOK() *GetForecastByZIPCodeOK {
	return &GetForecastByZIPCodeOK{}
}

/*
GetForecastByZIPCodeOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetForecastByZIPCodeOK struct {
	Payload *models.Forecast
}

// IsSuccess returns true when this get forecast by z Ip code o k response has a 2xx status code
func (o *GetForecastByZIPCodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get forecast by z Ip code o k response has a 3xx status code
func (o *GetForecastByZIPCodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get forecast by z Ip code o k response has a 4xx status code
func (o *GetForecastByZIPCodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get forecast by z Ip code o k response has a 5xx status code
func (o *GetForecastByZIPCodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get forecast by z Ip code o k response a status code equal to that given
func (o *GetForecastByZIPCodeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get forecast by z Ip code o k response
func (o *GetForecastByZIPCodeOK) Code() int {
	return 200
}

func (o *GetForecastByZIPCodeOK) Error() string {
	return fmt.Sprintf("[GET /data/2.5/forecast?zip={zip}][%d] getForecastByZIpCodeOK  %+v", 200, o.Payload)
}

func (o *GetForecastByZIPCodeOK) String() string {
	return fmt.Sprintf("[GET /data/2.5/forecast?zip={zip}][%d] getForecastByZIpCodeOK  %+v", 200, o.Payload)
}

func (o *GetForecastByZIPCodeOK) GetPayload() *models.Forecast {
	return o.Payload
}

func (o *GetForecastByZIPCodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Forecast)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetForecastByZIPCodeTooManyRequests creates a GetForecastByZIPCodeTooManyRequests with default headers values
func NewGetForecastByZIPCodeTooManyRequests() *GetForecastByZIPCodeTooManyRequests {
	return &GetForecastByZIPCodeTooManyRequests{}
}

/*
GetForecastByZIPCodeTooManyRequests describes a response with status code 429, with default header values.

Account is blocked
*/
type GetForecastByZIPCodeTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get forecast by z Ip code too many requests response has a 2xx status code
func (o *GetForecastByZIPCodeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get forecast by z Ip code too many requests response has a 3xx status code
func (o *GetForecastByZIPCodeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get forecast by z Ip code too many requests response has a 4xx status code
func (o *GetForecastByZIPCodeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get forecast by z Ip code too many requests response has a 5xx status code
func (o *GetForecastByZIPCodeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get forecast by z Ip code too many requests response a status code equal to that given
func (o *GetForecastByZIPCodeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get forecast by z Ip code too many requests response
func (o *GetForecastByZIPCodeTooManyRequests) Code() int {
	return 429
}

func (o *GetForecastByZIPCodeTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /data/2.5/forecast?zip={zip}][%d] getForecastByZIpCodeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetForecastByZIPCodeTooManyRequests) String() string {
	return fmt.Sprintf("[GET /data/2.5/forecast?zip={zip}][%d] getForecastByZIpCodeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetForecastByZIPCodeTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetForecastByZIPCodeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetForecastByZIPCodeDefault creates a GetForecastByZIPCodeDefault with default headers values
func NewGetForecastByZIPCodeDefault(code int) *GetForecastByZIPCodeDefault {
	return &GetForecastByZIPCodeDefault{
		_statusCode: code,
	}
}

/*
GetForecastByZIPCodeDefault describes a response with status code -1, with default header values.

Unexpected error
*/
type GetForecastByZIPCodeDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this get forecast by z IP code default response has a 2xx status code
func (o *GetForecastByZIPCodeDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get forecast by z IP code default response has a 3xx status code
func (o *GetForecastByZIPCodeDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get forecast by z IP code default response has a 4xx status code
func (o *GetForecastByZIPCodeDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get forecast by z IP code default response has a 5xx status code
func (o *GetForecastByZIPCodeDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get forecast by z IP code default response a status code equal to that given
func (o *GetForecastByZIPCodeDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get forecast by z IP code default response
func (o *GetForecastByZIPCodeDefault) Code() int {
	return o._statusCode
}

func (o *GetForecastByZIPCodeDefault) Error() string {
	return fmt.Sprintf("[GET /data/2.5/forecast?zip={zip}][%d] getForecastByZIPCode default  %+v", o._statusCode, o.Payload)
}

func (o *GetForecastByZIPCodeDefault) String() string {
	return fmt.Sprintf("[GET /data/2.5/forecast?zip={zip}][%d] getForecastByZIPCode default  %+v", o._statusCode, o.Payload)
}

func (o *GetForecastByZIPCodeDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetForecastByZIPCodeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

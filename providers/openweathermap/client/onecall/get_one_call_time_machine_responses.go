// Code generated by go-swagger; DO NOT EDIT.

package onecall

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kihamo/boggart/providers/openweathermap/models"
)

// GetOneCallTimeMachineReader is a Reader for the GetOneCallTimeMachine structure.
type GetOneCallTimeMachineReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOneCallTimeMachineReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOneCallTimeMachineOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 429:
		result := NewGetOneCallTimeMachineTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetOneCallTimeMachineDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetOneCallTimeMachineOK creates a GetOneCallTimeMachineOK with default headers values
func NewGetOneCallTimeMachineOK() *GetOneCallTimeMachineOK {
	return &GetOneCallTimeMachineOK{}
}

/*
GetOneCallTimeMachineOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetOneCallTimeMachineOK struct {
	Payload *models.OneCallTimeMachine
}

// IsSuccess returns true when this get one call time machine o k response has a 2xx status code
func (o *GetOneCallTimeMachineOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get one call time machine o k response has a 3xx status code
func (o *GetOneCallTimeMachineOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get one call time machine o k response has a 4xx status code
func (o *GetOneCallTimeMachineOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get one call time machine o k response has a 5xx status code
func (o *GetOneCallTimeMachineOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get one call time machine o k response a status code equal to that given
func (o *GetOneCallTimeMachineOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get one call time machine o k response
func (o *GetOneCallTimeMachineOK) Code() int {
	return 200
}

func (o *GetOneCallTimeMachineOK) Error() string {
	return fmt.Sprintf("[GET /data/2.5/onecall/timemachine?lat={lat}&lon={lon}][%d] getOneCallTimeMachineOK  %+v", 200, o.Payload)
}

func (o *GetOneCallTimeMachineOK) String() string {
	return fmt.Sprintf("[GET /data/2.5/onecall/timemachine?lat={lat}&lon={lon}][%d] getOneCallTimeMachineOK  %+v", 200, o.Payload)
}

func (o *GetOneCallTimeMachineOK) GetPayload() *models.OneCallTimeMachine {
	return o.Payload
}

func (o *GetOneCallTimeMachineOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OneCallTimeMachine)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOneCallTimeMachineTooManyRequests creates a GetOneCallTimeMachineTooManyRequests with default headers values
func NewGetOneCallTimeMachineTooManyRequests() *GetOneCallTimeMachineTooManyRequests {
	return &GetOneCallTimeMachineTooManyRequests{}
}

/*
GetOneCallTimeMachineTooManyRequests describes a response with status code 429, with default header values.

Account is blocked
*/
type GetOneCallTimeMachineTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get one call time machine too many requests response has a 2xx status code
func (o *GetOneCallTimeMachineTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get one call time machine too many requests response has a 3xx status code
func (o *GetOneCallTimeMachineTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get one call time machine too many requests response has a 4xx status code
func (o *GetOneCallTimeMachineTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get one call time machine too many requests response has a 5xx status code
func (o *GetOneCallTimeMachineTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get one call time machine too many requests response a status code equal to that given
func (o *GetOneCallTimeMachineTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get one call time machine too many requests response
func (o *GetOneCallTimeMachineTooManyRequests) Code() int {
	return 429
}

func (o *GetOneCallTimeMachineTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /data/2.5/onecall/timemachine?lat={lat}&lon={lon}][%d] getOneCallTimeMachineTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOneCallTimeMachineTooManyRequests) String() string {
	return fmt.Sprintf("[GET /data/2.5/onecall/timemachine?lat={lat}&lon={lon}][%d] getOneCallTimeMachineTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOneCallTimeMachineTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOneCallTimeMachineTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOneCallTimeMachineDefault creates a GetOneCallTimeMachineDefault with default headers values
func NewGetOneCallTimeMachineDefault(code int) *GetOneCallTimeMachineDefault {
	return &GetOneCallTimeMachineDefault{
		_statusCode: code,
	}
}

/*
GetOneCallTimeMachineDefault describes a response with status code -1, with default header values.

Unexpected error
*/
type GetOneCallTimeMachineDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this get one call time machine default response has a 2xx status code
func (o *GetOneCallTimeMachineDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get one call time machine default response has a 3xx status code
func (o *GetOneCallTimeMachineDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get one call time machine default response has a 4xx status code
func (o *GetOneCallTimeMachineDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get one call time machine default response has a 5xx status code
func (o *GetOneCallTimeMachineDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get one call time machine default response a status code equal to that given
func (o *GetOneCallTimeMachineDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get one call time machine default response
func (o *GetOneCallTimeMachineDefault) Code() int {
	return o._statusCode
}

func (o *GetOneCallTimeMachineDefault) Error() string {
	return fmt.Sprintf("[GET /data/2.5/onecall/timemachine?lat={lat}&lon={lon}][%d] getOneCallTimeMachine default  %+v", o._statusCode, o.Payload)
}

func (o *GetOneCallTimeMachineDefault) String() string {
	return fmt.Sprintf("[GET /data/2.5/onecall/timemachine?lat={lat}&lon={lon}][%d] getOneCallTimeMachine default  %+v", o._statusCode, o.Payload)
}

func (o *GetOneCallTimeMachineDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOneCallTimeMachineDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	extend "github.com/kihamo/boggart/protocols/swagger"
)

// ShowSystemResponse show system response
//
// swagger:model ShowSystemResponse
type ShowSystemResponse struct {

	// cpuload
	Cpuload int64 `json:"cpuload,omitempty"`

	// domainname
	Domainname string `json:"domainname,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// membuffers
	Membuffers int64 `json:"membuffers,omitempty"`

	// memcache
	Memcache int64 `json:"memcache,omitempty"`

	// memfree
	Memfree int64 `json:"memfree,omitempty"`

	// memory
	Memory string `json:"memory,omitempty"`

	// memtotal
	Memtotal int64 `json:"memtotal,omitempty"`

	// swap
	Swap string `json:"swap,omitempty"`

	// swapfree
	Swapfree int64 `json:"swapfree,omitempty"`

	// swaptotal
	Swaptotal int64 `json:"swaptotal,omitempty"`

	// uptime
	Uptime extend.IntegerAsString `json:"uptime,omitempty"`
}

// Validate validates this show system response
func (m *ShowSystemResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUptime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShowSystemResponse) validateUptime(formats strfmt.Registry) error {
	if swag.IsZero(m.Uptime) { // not required
		return nil
	}

	if err := m.Uptime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("uptime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("uptime")
		}
		return err
	}

	return nil
}

// ContextValidate validate this show system response based on the context it is used
func (m *ShowSystemResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUptime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShowSystemResponse) contextValidateUptime(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Uptime.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("uptime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("uptime")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShowSystemResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShowSystemResponse) UnmarshalBinary(b []byte) error {
	var res ShowSystemResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

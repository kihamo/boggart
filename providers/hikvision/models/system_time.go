// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemTime system time
//
// swagger:model SystemTime
type SystemTime struct {

	// local time
	// Format: date-time
	LocalTime strfmt.DateTime `json:"localTime,omitempty" xml:"localTime,omitempty"`

	// time mode
	// Enum: [NTP manual timecorrect]
	TimeMode string `json:"timeMode,omitempty" xml:"timeMode,omitempty"`

	// time zone
	TimeZone string `json:"timeZone,omitempty" xml:"timeZone,omitempty"`
}

// Validate validates this system time
func (m *SystemTime) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocalTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemTime) validateLocalTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalTime) { // not required
		return nil
	}

	if err := validate.FormatOf("localTime", "body", "date-time", m.LocalTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var systemTimeTypeTimeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NTP","manual","timecorrect"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		systemTimeTypeTimeModePropEnum = append(systemTimeTypeTimeModePropEnum, v)
	}
}

const (

	// SystemTimeTimeModeNTP captures enum value "NTP"
	SystemTimeTimeModeNTP string = "NTP"

	// SystemTimeTimeModeManual captures enum value "manual"
	SystemTimeTimeModeManual string = "manual"

	// SystemTimeTimeModeTimecorrect captures enum value "timecorrect"
	SystemTimeTimeModeTimecorrect string = "timecorrect"
)

// prop value enum
func (m *SystemTime) validateTimeModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, systemTimeTypeTimeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SystemTime) validateTimeMode(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeModeEnum("timeMode", "body", m.TimeMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this system time based on context it is used
func (m *SystemTime) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SystemTime) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemTime) UnmarshalBinary(b []byte) error {
	var res SystemTime
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemStatus system status
//
// swagger:model SystemStatus
type SystemStatus struct {

	// CPU list
	CPUList []*SystemStatusCPUListItems0 `json:"CPUList" xml:"CPUList"`

	// camera list
	CameraList []*SystemStatusCameraListItems0 `json:"CameraList" xml:"CameraList"`

	// dome info list
	DomeInfoList []*SystemStatusDomeInfoListItems0 `json:"DomeInfoList" xml:"DomeInfoList"`

	// memory list
	MemoryList []*SystemStatusMemoryListItems0 `json:"MemoryList" xml:"MemoryList"`

	// current device time
	// Format: date-time
	CurrentDeviceTime strfmt.DateTime `json:"currentDeviceTime,omitempty" xml:"currentDeviceTime,omitempty"`

	// device up time
	DeviceUpTime int64 `json:"deviceUpTime,omitempty" xml:"deviceUpTime,omitempty"`

	// total reboot count
	TotalRebootCount int64 `json:"totalRebootCount,omitempty" xml:"totalRebootCount,omitempty"`
}

// Validate validates this system status
func (m *SystemStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCameraList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomeInfoList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentDeviceTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemStatus) validateCPUList(formats strfmt.Registry) error {
	if swag.IsZero(m.CPUList) { // not required
		return nil
	}

	for i := 0; i < len(m.CPUList); i++ {
		if swag.IsZero(m.CPUList[i]) { // not required
			continue
		}

		if m.CPUList[i] != nil {
			if err := m.CPUList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CPUList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CPUList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemStatus) validateCameraList(formats strfmt.Registry) error {
	if swag.IsZero(m.CameraList) { // not required
		return nil
	}

	for i := 0; i < len(m.CameraList); i++ {
		if swag.IsZero(m.CameraList[i]) { // not required
			continue
		}

		if m.CameraList[i] != nil {
			if err := m.CameraList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CameraList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CameraList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemStatus) validateDomeInfoList(formats strfmt.Registry) error {
	if swag.IsZero(m.DomeInfoList) { // not required
		return nil
	}

	for i := 0; i < len(m.DomeInfoList); i++ {
		if swag.IsZero(m.DomeInfoList[i]) { // not required
			continue
		}

		if m.DomeInfoList[i] != nil {
			if err := m.DomeInfoList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DomeInfoList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("DomeInfoList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemStatus) validateMemoryList(formats strfmt.Registry) error {
	if swag.IsZero(m.MemoryList) { // not required
		return nil
	}

	for i := 0; i < len(m.MemoryList); i++ {
		if swag.IsZero(m.MemoryList[i]) { // not required
			continue
		}

		if m.MemoryList[i] != nil {
			if err := m.MemoryList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MemoryList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("MemoryList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemStatus) validateCurrentDeviceTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentDeviceTime) { // not required
		return nil
	}

	if err := validate.FormatOf("currentDeviceTime", "body", "date-time", m.CurrentDeviceTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this system status based on the context it is used
func (m *SystemStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCPUList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCameraList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDomeInfoList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemoryList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemStatus) contextValidateCPUList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CPUList); i++ {

		if m.CPUList[i] != nil {

			if swag.IsZero(m.CPUList[i]) { // not required
				return nil
			}

			if err := m.CPUList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CPUList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CPUList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemStatus) contextValidateCameraList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CameraList); i++ {

		if m.CameraList[i] != nil {

			if swag.IsZero(m.CameraList[i]) { // not required
				return nil
			}

			if err := m.CameraList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CameraList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CameraList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemStatus) contextValidateDomeInfoList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DomeInfoList); i++ {

		if m.DomeInfoList[i] != nil {

			if swag.IsZero(m.DomeInfoList[i]) { // not required
				return nil
			}

			if err := m.DomeInfoList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DomeInfoList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("DomeInfoList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemStatus) contextValidateMemoryList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MemoryList); i++ {

		if m.MemoryList[i] != nil {

			if swag.IsZero(m.MemoryList[i]) { // not required
				return nil
			}

			if err := m.MemoryList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MemoryList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("MemoryList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemStatus) UnmarshalBinary(b []byte) error {
	var res SystemStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SystemStatusCPUListItems0 system status CPU list items0
//
// swagger:model SystemStatusCPUListItems0
type SystemStatusCPUListItems0 struct {

	// cpu description
	CPUDescription string `json:"cpuDescription,omitempty" xml:"CPU>cpuDescription,omitempty"`

	// cpu utilization
	CPUUtilization int64 `json:"cpuUtilization,omitempty" xml:"CPU>cpuUtilization,omitempty"`
}

// Validate validates this system status CPU list items0
func (m *SystemStatusCPUListItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this system status CPU list items0 based on context it is used
func (m *SystemStatusCPUListItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SystemStatusCPUListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemStatusCPUListItems0) UnmarshalBinary(b []byte) error {
	var res SystemStatusCPUListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SystemStatusCameraListItems0 system status camera list items0
//
// swagger:model SystemStatusCameraListItems0
type SystemStatusCameraListItems0 struct {

	// camera run total time
	CameraRunTotalTime int64 `json:"cameraRunTotalTime,omitempty" xml:"Camera>cameraRunTotalTime,omitempty"`

	// focus reverse times
	FocusReverseTimes int64 `json:"focusReverseTimes,omitempty" xml:"Camera>focusReverseTimes,omitempty"`

	// focus total steps
	FocusTotalSteps int64 `json:"focusTotalSteps,omitempty" xml:"Camera>focusTotalSteps,omitempty"`

	// icr shift times
	IcrShiftTimes int64 `json:"icrShiftTimes,omitempty" xml:"Camera>icrShiftTimes,omitempty"`

	// icr total steps
	IcrTotalSteps int64 `json:"icrTotalSteps,omitempty" xml:"Camera>icrTotalSteps,omitempty"`

	// iris shift times
	IrisShiftTimes int64 `json:"irisShiftTimes,omitempty" xml:"Camera>irisShiftTimes,omitempty"`

	// iris total steps
	IrisTotalSteps int64 `json:"irisTotalSteps,omitempty" xml:"Camera>irisTotalSteps,omitempty"`

	// lens intir times
	LensIntirTimes int64 `json:"lensIntirTimes,omitempty" xml:"Camera>lensIntirTimes,omitempty"`

	// zoom reverse times
	ZoomReverseTimes int64 `json:"zoomReverseTimes,omitempty" xml:"Camera>zoomReverseTimes,omitempty"`

	// zoom total steps
	ZoomTotalSteps int64 `json:"zoomTotalSteps,omitempty" xml:"Camera>zoomTotalSteps,omitempty"`
}

// Validate validates this system status camera list items0
func (m *SystemStatusCameraListItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this system status camera list items0 based on context it is used
func (m *SystemStatusCameraListItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SystemStatusCameraListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemStatusCameraListItems0) UnmarshalBinary(b []byte) error {
	var res SystemStatusCameraListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SystemStatusDomeInfoListItems0 system status dome info list items0
//
// swagger:model SystemStatusDomeInfoListItems0
type SystemStatusDomeInfoListItems0 struct {

	// dome run total time
	DomeRunTotalTime int64 `json:"domeRunTotalTime,omitempty" xml:"DomeInfo>domeRunTotalTime,omitempty"`

	// fan state
	FanState int64 `json:"fanState,omitempty" xml:"DomeInfo>fanState,omitempty"`

	// heat state
	HeatState int64 `json:"heatState,omitempty" xml:"DomeInfo>heatState,omitempty"`

	// pan total rounds
	PanTotalRounds int64 `json:"panTotalRounds,omitempty" xml:"DomeInfo>panTotalRounds,omitempty"`

	// run time between ntwenty pforty
	RunTimeBetweenNtwentyPforty int64 `json:"runTimeBetweenNtwentyPforty,omitempty" xml:"DomeInfo>runTimeBetweenNtwentyPforty,omitempty"`

	// run time under negativetwenty
	RunTimeUnderNegativetwenty int64 `json:"runTimeUnderNegativetwenty,omitempty" xml:"DomeInfo>runTimeUnderNegativetwenty,omitempty"`

	// runtime over positiveforty
	RuntimeOverPositiveforty int64 `json:"runtimeOverPositiveforty,omitempty" xml:"DomeInfo>runtimeOverPositiveforty,omitempty"`

	// tilt total rounds
	TiltTotalRounds int64 `json:"tiltTotalRounds,omitempty" xml:"DomeInfo>tiltTotalRounds,omitempty"`
}

// Validate validates this system status dome info list items0
func (m *SystemStatusDomeInfoListItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this system status dome info list items0 based on context it is used
func (m *SystemStatusDomeInfoListItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SystemStatusDomeInfoListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemStatusDomeInfoListItems0) UnmarshalBinary(b []byte) error {
	var res SystemStatusDomeInfoListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SystemStatusMemoryListItems0 system status memory list items0
//
// swagger:model SystemStatusMemoryListItems0
type SystemStatusMemoryListItems0 struct {

	// memory available
	MemoryAvailable float64 `json:"memoryAvailable,omitempty" xml:"Memory>memoryAvailable,omitempty"`

	// memory description
	MemoryDescription string `json:"memoryDescription,omitempty" xml:"Memory>memoryDescription,omitempty"`

	// memory usage
	MemoryUsage float64 `json:"memoryUsage,omitempty" xml:"Memory>memoryUsage,omitempty"`
}

// Validate validates this system status memory list items0
func (m *SystemStatusMemoryListItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this system status memory list items0 based on context it is used
func (m *SystemStatusMemoryListItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SystemStatusMemoryListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemStatusMemoryListItems0) UnmarshalBinary(b []byte) error {
	var res SystemStatusMemoryListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImageChannels image channels
//
// swagger:model ImageChannels
type ImageChannels []*ImageChannelsItems0

// Validate validates this image channels
func (m ImageChannels) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this image channels based on the context it is used
func (m ImageChannels) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if m[i] != nil {

			if swag.IsZero(m[i]) { // not required
				return nil
			}

			if err := m[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ImageChannelsItems0 image channels items0
//
// swagger:model ImageChannelsItems0
type ImageChannelsItems0 struct {

	// image flip enabled
	ImageFlipEnabled bool `json:"ImageFlipEnabled,omitempty" xml:"ImageChannel>ImageFlip>enabled,omitempty"`

	// image flip style
	// Enum: [LEFTRIGHT UPDOWN CENTER AUTO]
	ImageFlipStyle string `json:"ImageFlipStyle,omitempty" xml:"ImageChannel>ImageFlip>ImageFlipStyle,omitempty"`

	// ir cut filter ext night to day filter level
	// Enum: [low normal high]
	IrCutFilterExtNightToDayFilterLevel string `json:"IrCutFilterExtNightToDayFilterLevel,omitempty" xml:"ImageChannel>IrcutFilterExt>nightToDayFilterLevel,omitempty"`

	// ir cut filter ext night to day filter time
	IrCutFilterExtNightToDayFilterTime int64 `json:"IrCutFilterExtNightToDayFilterTime,omitempty" xml:"ImageChannel>IrcutFilterExt>nightToDayFilterTime,omitempty"`

	// ir cut filter ext schedule time range begin
	IrCutFilterExtScheduleTimeRangeBegin string `json:"IrCutFilterExtScheduleTimeRangeBegin,omitempty" xml:"ImageChannel>IrcutFilterExt>TimeRange>beginTime,omitempty"`

	// ir cut filter ext schedule time range end
	IrCutFilterExtScheduleTimeRangeEnd string `json:"IrCutFilterExtScheduleTimeRangeEnd,omitempty" xml:"ImageChannel>IrcutFilterExt>TimeRange>endTime,omitempty"`

	// ir cut filter ext schedule type
	IrCutFilterExtScheduleType string `json:"IrCutFilterExtScheduleType,omitempty" xml:"ImageChannel>IrcutFilterExt>scheduleType,omitempty"`

	// ir cut filter ext type
	// Enum: [auto day night shedule eventTrigger]
	IrCutFilterExtType string `json:"IrCutFilterExtType,omitempty" xml:"ImageChannel>IrcutFilterExt>IrcutFilterType,omitempty"`

	// ircut filter level
	// Enum: [low normal high]
	IrcutFilterLevel string `json:"IrcutFilterLevel,omitempty" xml:"ImageChannel>IrcutFilter>IrcutFilterLevel,omitempty"`

	// ircut filter time
	IrcutFilterTime int64 `json:"IrcutFilterTime,omitempty" xml:"ImageChannel>IrcutFilter>IrcutFilterTime,omitempty"`

	// ircut filter type
	// Enum: [auto day night shedule eventTrigger]
	IrcutFilterType string `json:"IrcutFilterType,omitempty" xml:"ImageChannel>IrcutFilter>IrcutFilterType,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty" xml:"ImageChannel>enabled,omitempty"`

	// id
	ID int64 `json:"id,omitempty" xml:"ImageChannel>id,omitempty"`

	// video input ID
	VideoInputID int64 `json:"videoInputID,omitempty" xml:"ImageChannel>videoInputID,omitempty"`
}

// Validate validates this image channels items0
func (m *ImageChannelsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImageFlipStyle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIrCutFilterExtNightToDayFilterLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIrCutFilterExtType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIrcutFilterLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIrcutFilterType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var imageChannelsItems0TypeImageFlipStylePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LEFTRIGHT","UPDOWN","CENTER","AUTO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageChannelsItems0TypeImageFlipStylePropEnum = append(imageChannelsItems0TypeImageFlipStylePropEnum, v)
	}
}

const (

	// ImageChannelsItems0ImageFlipStyleLEFTRIGHT captures enum value "LEFTRIGHT"
	ImageChannelsItems0ImageFlipStyleLEFTRIGHT string = "LEFTRIGHT"

	// ImageChannelsItems0ImageFlipStyleUPDOWN captures enum value "UPDOWN"
	ImageChannelsItems0ImageFlipStyleUPDOWN string = "UPDOWN"

	// ImageChannelsItems0ImageFlipStyleCENTER captures enum value "CENTER"
	ImageChannelsItems0ImageFlipStyleCENTER string = "CENTER"

	// ImageChannelsItems0ImageFlipStyleAUTO captures enum value "AUTO"
	ImageChannelsItems0ImageFlipStyleAUTO string = "AUTO"
)

// prop value enum
func (m *ImageChannelsItems0) validateImageFlipStyleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, imageChannelsItems0TypeImageFlipStylePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImageChannelsItems0) validateImageFlipStyle(formats strfmt.Registry) error {
	if swag.IsZero(m.ImageFlipStyle) { // not required
		return nil
	}

	// value enum
	if err := m.validateImageFlipStyleEnum("ImageFlipStyle", "body", m.ImageFlipStyle); err != nil {
		return err
	}

	return nil
}

var imageChannelsItems0TypeIrCutFilterExtNightToDayFilterLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["low","normal","high"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageChannelsItems0TypeIrCutFilterExtNightToDayFilterLevelPropEnum = append(imageChannelsItems0TypeIrCutFilterExtNightToDayFilterLevelPropEnum, v)
	}
}

const (

	// ImageChannelsItems0IrCutFilterExtNightToDayFilterLevelLow captures enum value "low"
	ImageChannelsItems0IrCutFilterExtNightToDayFilterLevelLow string = "low"

	// ImageChannelsItems0IrCutFilterExtNightToDayFilterLevelNormal captures enum value "normal"
	ImageChannelsItems0IrCutFilterExtNightToDayFilterLevelNormal string = "normal"

	// ImageChannelsItems0IrCutFilterExtNightToDayFilterLevelHigh captures enum value "high"
	ImageChannelsItems0IrCutFilterExtNightToDayFilterLevelHigh string = "high"
)

// prop value enum
func (m *ImageChannelsItems0) validateIrCutFilterExtNightToDayFilterLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, imageChannelsItems0TypeIrCutFilterExtNightToDayFilterLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImageChannelsItems0) validateIrCutFilterExtNightToDayFilterLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.IrCutFilterExtNightToDayFilterLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateIrCutFilterExtNightToDayFilterLevelEnum("IrCutFilterExtNightToDayFilterLevel", "body", m.IrCutFilterExtNightToDayFilterLevel); err != nil {
		return err
	}

	return nil
}

var imageChannelsItems0TypeIrCutFilterExtTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auto","day","night","shedule","eventTrigger"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageChannelsItems0TypeIrCutFilterExtTypePropEnum = append(imageChannelsItems0TypeIrCutFilterExtTypePropEnum, v)
	}
}

const (

	// ImageChannelsItems0IrCutFilterExtTypeAuto captures enum value "auto"
	ImageChannelsItems0IrCutFilterExtTypeAuto string = "auto"

	// ImageChannelsItems0IrCutFilterExtTypeDay captures enum value "day"
	ImageChannelsItems0IrCutFilterExtTypeDay string = "day"

	// ImageChannelsItems0IrCutFilterExtTypeNight captures enum value "night"
	ImageChannelsItems0IrCutFilterExtTypeNight string = "night"

	// ImageChannelsItems0IrCutFilterExtTypeShedule captures enum value "shedule"
	ImageChannelsItems0IrCutFilterExtTypeShedule string = "shedule"

	// ImageChannelsItems0IrCutFilterExtTypeEventTrigger captures enum value "eventTrigger"
	ImageChannelsItems0IrCutFilterExtTypeEventTrigger string = "eventTrigger"
)

// prop value enum
func (m *ImageChannelsItems0) validateIrCutFilterExtTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, imageChannelsItems0TypeIrCutFilterExtTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImageChannelsItems0) validateIrCutFilterExtType(formats strfmt.Registry) error {
	if swag.IsZero(m.IrCutFilterExtType) { // not required
		return nil
	}

	// value enum
	if err := m.validateIrCutFilterExtTypeEnum("IrCutFilterExtType", "body", m.IrCutFilterExtType); err != nil {
		return err
	}

	return nil
}

var imageChannelsItems0TypeIrcutFilterLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["low","normal","high"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageChannelsItems0TypeIrcutFilterLevelPropEnum = append(imageChannelsItems0TypeIrcutFilterLevelPropEnum, v)
	}
}

const (

	// ImageChannelsItems0IrcutFilterLevelLow captures enum value "low"
	ImageChannelsItems0IrcutFilterLevelLow string = "low"

	// ImageChannelsItems0IrcutFilterLevelNormal captures enum value "normal"
	ImageChannelsItems0IrcutFilterLevelNormal string = "normal"

	// ImageChannelsItems0IrcutFilterLevelHigh captures enum value "high"
	ImageChannelsItems0IrcutFilterLevelHigh string = "high"
)

// prop value enum
func (m *ImageChannelsItems0) validateIrcutFilterLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, imageChannelsItems0TypeIrcutFilterLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImageChannelsItems0) validateIrcutFilterLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.IrcutFilterLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateIrcutFilterLevelEnum("IrcutFilterLevel", "body", m.IrcutFilterLevel); err != nil {
		return err
	}

	return nil
}

var imageChannelsItems0TypeIrcutFilterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auto","day","night","shedule","eventTrigger"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageChannelsItems0TypeIrcutFilterTypePropEnum = append(imageChannelsItems0TypeIrcutFilterTypePropEnum, v)
	}
}

const (

	// ImageChannelsItems0IrcutFilterTypeAuto captures enum value "auto"
	ImageChannelsItems0IrcutFilterTypeAuto string = "auto"

	// ImageChannelsItems0IrcutFilterTypeDay captures enum value "day"
	ImageChannelsItems0IrcutFilterTypeDay string = "day"

	// ImageChannelsItems0IrcutFilterTypeNight captures enum value "night"
	ImageChannelsItems0IrcutFilterTypeNight string = "night"

	// ImageChannelsItems0IrcutFilterTypeShedule captures enum value "shedule"
	ImageChannelsItems0IrcutFilterTypeShedule string = "shedule"

	// ImageChannelsItems0IrcutFilterTypeEventTrigger captures enum value "eventTrigger"
	ImageChannelsItems0IrcutFilterTypeEventTrigger string = "eventTrigger"
)

// prop value enum
func (m *ImageChannelsItems0) validateIrcutFilterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, imageChannelsItems0TypeIrcutFilterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImageChannelsItems0) validateIrcutFilterType(formats strfmt.Registry) error {
	if swag.IsZero(m.IrcutFilterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateIrcutFilterTypeEnum("IrcutFilterType", "body", m.IrcutFilterType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this image channels items0 based on context it is used
func (m *ImageChannelsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ImageChannelsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageChannelsItems0) UnmarshalBinary(b []byte) error {
	var res ImageChannelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

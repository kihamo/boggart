// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NTPServer n t p server
//
// swagger:model NTPServer
type NTPServer struct {

	// addressing format type
	// Enum: [ipaddress hostname]
	AddressingFormatType string `json:"addressingFormatType,omitempty" xml:"addressingFormatType,omitempty"`

	// host name
	HostName *string `json:"hostName,omitempty" xml:"hostName,omitempty"`

	// id
	ID uint64 `json:"id,omitempty" xml:"id,omitempty"`

	// ip address
	IPAddress *string `json:"ipAddress,omitempty" xml:"ipAddress,omitempty"`

	// ipv6 address
	IPV6Address *string `json:"ipv6Address,omitempty" xml:"ipv6Address,omitempty"`

	// port no
	PortNo uint64 `json:"portNo,omitempty" xml:"portNo,omitempty"`

	// synchronize interval
	SynchronizeInterval uint64 `json:"synchronizeInterval,omitempty" xml:"synchronizeInterval,omitempty"`
}

// Validate validates this n t p server
func (m *NTPServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressingFormatType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nTPServerTypeAddressingFormatTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ipaddress","hostname"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nTPServerTypeAddressingFormatTypePropEnum = append(nTPServerTypeAddressingFormatTypePropEnum, v)
	}
}

const (

	// NTPServerAddressingFormatTypeIpaddress captures enum value "ipaddress"
	NTPServerAddressingFormatTypeIpaddress string = "ipaddress"

	// NTPServerAddressingFormatTypeHostname captures enum value "hostname"
	NTPServerAddressingFormatTypeHostname string = "hostname"
)

// prop value enum
func (m *NTPServer) validateAddressingFormatTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nTPServerTypeAddressingFormatTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NTPServer) validateAddressingFormatType(formats strfmt.Registry) error {
	if swag.IsZero(m.AddressingFormatType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAddressingFormatTypeEnum("addressingFormatType", "body", m.AddressingFormatType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this n t p server based on context it is used
func (m *NTPServer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NTPServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NTPServer) UnmarshalBinary(b []byte) error {
	var res NTPServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

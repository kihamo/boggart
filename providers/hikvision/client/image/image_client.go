// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new image API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for image API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetImageChannelCapabilities(params *GetImageChannelCapabilitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetImageChannelCapabilitiesOK, error)

	GetImageChannels(params *GetImageChannelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetImageChannelsOK, error)

	SetImageFlip(params *SetImageFlipParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetImageFlipOK, error)

	SetImageIrCutFilter(params *SetImageIrCutFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetImageIrCutFilterOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetImageChannelCapabilities get image channel capabilities API
*/
func (a *Client) GetImageChannelCapabilities(params *GetImageChannelCapabilitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetImageChannelCapabilitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageChannelCapabilitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getImageChannelCapabilities",
		Method:             "GET",
		PathPattern:        "/Image/channels/{channel}/capabilities",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImageChannelCapabilitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImageChannelCapabilitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getImageChannelCapabilities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetImageChannels get image channels API
*/
func (a *Client) GetImageChannels(params *GetImageChannelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetImageChannelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageChannelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getImageChannels",
		Method:             "GET",
		PathPattern:        "/Image/channels",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImageChannelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImageChannelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getImageChannels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetImageFlip set image flip API
*/
func (a *Client) SetImageFlip(params *SetImageFlipParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetImageFlipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetImageFlipParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setImageFlip",
		Method:             "PUT",
		PathPattern:        "/Image/channels/{channel}/ImageFlip",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetImageFlipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetImageFlipOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setImageFlip: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetImageIrCutFilter set image ir cut filter API
*/
func (a *Client) SetImageIrCutFilter(params *SetImageIrCutFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetImageIrCutFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetImageIrCutFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setImageIrCutFilter",
		Method:             "PUT",
		PathPattern:        "/Image/channels/{channel}/IrcutFilter",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetImageIrCutFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetImageIrCutFilterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setImageIrCutFilter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

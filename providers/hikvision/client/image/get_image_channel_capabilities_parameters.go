// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetImageChannelCapabilitiesParams creates a new GetImageChannelCapabilitiesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetImageChannelCapabilitiesParams() *GetImageChannelCapabilitiesParams {
	return &GetImageChannelCapabilitiesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetImageChannelCapabilitiesParamsWithTimeout creates a new GetImageChannelCapabilitiesParams object
// with the ability to set a timeout on a request.
func NewGetImageChannelCapabilitiesParamsWithTimeout(timeout time.Duration) *GetImageChannelCapabilitiesParams {
	return &GetImageChannelCapabilitiesParams{
		timeout: timeout,
	}
}

// NewGetImageChannelCapabilitiesParamsWithContext creates a new GetImageChannelCapabilitiesParams object
// with the ability to set a context for a request.
func NewGetImageChannelCapabilitiesParamsWithContext(ctx context.Context) *GetImageChannelCapabilitiesParams {
	return &GetImageChannelCapabilitiesParams{
		Context: ctx,
	}
}

// NewGetImageChannelCapabilitiesParamsWithHTTPClient creates a new GetImageChannelCapabilitiesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetImageChannelCapabilitiesParamsWithHTTPClient(client *http.Client) *GetImageChannelCapabilitiesParams {
	return &GetImageChannelCapabilitiesParams{
		HTTPClient: client,
	}
}

/*
GetImageChannelCapabilitiesParams contains all the parameters to send to the API endpoint

	for the get image channel capabilities operation.

	Typically these are written to a http.Request.
*/
type GetImageChannelCapabilitiesParams struct {

	/* Channel.

	   Channel ID

	   Format: uint64
	*/
	Channel uint64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get image channel capabilities params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetImageChannelCapabilitiesParams) WithDefaults() *GetImageChannelCapabilitiesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get image channel capabilities params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetImageChannelCapabilitiesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get image channel capabilities params
func (o *GetImageChannelCapabilitiesParams) WithTimeout(timeout time.Duration) *GetImageChannelCapabilitiesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get image channel capabilities params
func (o *GetImageChannelCapabilitiesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get image channel capabilities params
func (o *GetImageChannelCapabilitiesParams) WithContext(ctx context.Context) *GetImageChannelCapabilitiesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get image channel capabilities params
func (o *GetImageChannelCapabilitiesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get image channel capabilities params
func (o *GetImageChannelCapabilitiesParams) WithHTTPClient(client *http.Client) *GetImageChannelCapabilitiesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get image channel capabilities params
func (o *GetImageChannelCapabilitiesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChannel adds the channel to the get image channel capabilities params
func (o *GetImageChannelCapabilitiesParams) WithChannel(channel uint64) *GetImageChannelCapabilitiesParams {
	o.SetChannel(channel)
	return o
}

// SetChannel adds the channel to the get image channel capabilities params
func (o *GetImageChannelCapabilitiesParams) SetChannel(channel uint64) {
	o.Channel = channel
}

// WriteToRequest writes these params to a swagger request
func (o *GetImageChannelCapabilitiesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param channel
	if err := r.SetPathParam("channel", swag.FormatUint64(o.Channel)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new system API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetNtpServers(params *GetNtpServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNtpServersOK, error)

	GetStatus(params *GetStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStatusOK, error)

	GetSystemDeviceInfo(params *GetSystemDeviceInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSystemDeviceInfoOK, error)

	GetSystemNetworkExtension(params *GetSystemNetworkExtensionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSystemNetworkExtensionOK, error)

	GetSystemUpgradeStatus(params *GetSystemUpgradeStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSystemUpgradeStatusOK, error)

	GetTime(params *GetTimeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTimeOK, error)

	Reboot(params *RebootParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RebootOK, error)

	SetNtpServer(params *SetNtpServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetNtpServerOK, error)

	SetNtpServers(params *SetNtpServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetNtpServersOK, error)

	SetSystemNetworkExtension(params *SetSystemNetworkExtensionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetSystemNetworkExtensionOK, error)

	SetTime(params *SetTimeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetTimeOK, error)

	UpdateSystemFirmware(params *UpdateSystemFirmwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSystemFirmwareOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetNtpServers get ntp servers API
*/
func (a *Client) GetNtpServers(params *GetNtpServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNtpServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNtpServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNtpServers",
		Method:             "GET",
		PathPattern:        "/System/time/NtpServers",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNtpServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNtpServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNtpServers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStatus get status API
*/
func (a *Client) GetStatus(params *GetStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStatus",
		Method:             "GET",
		PathPattern:        "/System/status",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSystemDeviceInfo get system device info API
*/
func (a *Client) GetSystemDeviceInfo(params *GetSystemDeviceInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSystemDeviceInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemDeviceInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSystemDeviceInfo",
		Method:             "GET",
		PathPattern:        "/System/deviceInfo",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemDeviceInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemDeviceInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSystemDeviceInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSystemNetworkExtension get system network extension API
*/
func (a *Client) GetSystemNetworkExtension(params *GetSystemNetworkExtensionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSystemNetworkExtensionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemNetworkExtensionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSystemNetworkExtension",
		Method:             "GET",
		PathPattern:        "/System/Network/extension",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemNetworkExtensionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemNetworkExtensionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSystemNetworkExtensionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSystemUpgradeStatus get system upgrade status API
*/
func (a *Client) GetSystemUpgradeStatus(params *GetSystemUpgradeStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSystemUpgradeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemUpgradeStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSystemUpgradeStatus",
		Method:             "GET",
		PathPattern:        "/System/upgradeStatus",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemUpgradeStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemUpgradeStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSystemUpgradeStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTime get time API
*/
func (a *Client) GetTime(params *GetTimeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTime",
		Method:             "GET",
		PathPattern:        "/System/time",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTimeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Reboot reboot API
*/
func (a *Client) Reboot(params *RebootParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RebootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRebootParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reboot",
		Method:             "PUT",
		PathPattern:        "/System/reboot",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RebootReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RebootOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reboot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetNtpServer its is used to update the configuration of a n t p server for the device
*/
func (a *Client) SetNtpServer(params *SetNtpServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetNtpServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetNtpServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setNtpServer",
		Method:             "PUT",
		PathPattern:        "/System/time/ntpServers/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetNtpServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetNtpServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setNtpServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetNtpServers set ntp servers API
*/
func (a *Client) SetNtpServers(params *SetNtpServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetNtpServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetNtpServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setNtpServers",
		Method:             "PUT",
		PathPattern:        "/System/time/NtpServers",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetNtpServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetNtpServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setNtpServers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetSystemNetworkExtension set system network extension API
*/
func (a *Client) SetSystemNetworkExtension(params *SetSystemNetworkExtensionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetSystemNetworkExtensionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetSystemNetworkExtensionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setSystemNetworkExtension",
		Method:             "PUT",
		PathPattern:        "/System/Network/extension",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetSystemNetworkExtensionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetSystemNetworkExtensionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setSystemNetworkExtension: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetTime set time API
*/
func (a *Client) SetTime(params *SetTimeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setTime",
		Method:             "PUT",
		PathPattern:        "/System/time",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetTimeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setTime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSystemFirmware updates the firmware of the device
*/
func (a *Client) UpdateSystemFirmware(params *UpdateSystemFirmwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSystemFirmwareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSystemFirmwareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSystemFirmware",
		Method:             "PUT",
		PathPattern:        "/System/updateFirmware",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSystemFirmwareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSystemFirmwareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSystemFirmware: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
